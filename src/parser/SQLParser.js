// Generated from /home/mazinsw/Development/SQLtoClass/src/parser/SQLParser.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var SQLParserListener = require('./SQLParserListener').SQLParserListener;
var grammarFileName = "SQLParser.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003[\u02e5\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0003\u0002\u0007\u0002R\n\u0002",
    "\f\u0002\u000e\u0002U\u000b\u0002\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003j\n\u0003",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004p\n\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0005\u0005y\n\u0005\u0003\u0005\u0003\u0005\u0007\u0005",
    "}\n\u0005\f\u0005\u000e\u0005\u0080\u000b\u0005\u0003\u0006\u0005\u0006",
    "\u0083\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u0088",
    "\n\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u008c\n\u0006\u0003\u0006",
    "\u0003\u0006\u0005\u0006\u0090\n\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0005\u0006\u0096\n\u0006\u0003\u0007\u0003\u0007",
    "\u0003\b\u0003\b\u0003\b\u0003\b\u0007\b\u009e\n\b\f\b\u000e\b\u00a1",
    "\u000b\b\u0003\b\u0003\b\u0003\t\u0007\t\u00a6\n\t\f\t\u000e\t\u00a9",
    "\u000b\t\u0003\t\u0003\t\u0003\t\u0003\t\u0007\t\u00af\n\t\f\t\u000e",
    "\t\u00b2\u000b\t\u0003\t\u0005\t\u00b5\n\t\u0003\n\u0003\n\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0005\f\u00be\n\f\u0003\f\u0003",
    "\f\u0003\f\u0005\f\u00c3\n\f\u0003\f\u0003\f\u0003\f\u0007\f\u00c8\n",
    "\f\f\f\u000e\f\u00cb\u000b\f\u0003\f\u0005\f\u00ce\n\f\u0003\r\u0003",
    "\r\u0003\u000e\u0003\u000e\u0005\u000e\u00d4\n\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u00da\n\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0005\u000e\u00df\n\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0007\u0010\u00e9\n\u0010\f\u0010\u000e\u0010\u00ec\u000b\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0005\u0011\u00f5\n\u0011\u0005\u0011\u00f7\n\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0007",
    "\u0011\u00ff\n\u0011\f\u0011\u000e\u0011\u0102\u000b\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u0109\n",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u010f",
    "\n\u0011\f\u0011\u000e\u0011\u0112\u000b\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u0119\n\u0011\u0005",
    "\u0011\u011b\n\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u011f\n\u0011",
    "\u0003\u0011\u0005\u0011\u0122\n\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0007\u0011\u0128\n\u0011\f\u0011\u000e\u0011\u012b",
    "\u000b\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0005\u0011\u0132\n\u0011\u0005\u0011\u0134\n\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0005\u0011\u0139\n\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0007\u0011\u013f\n\u0011\f\u0011\u000e\u0011",
    "\u0142\u000b\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005",
    "\u0011\u0148\n\u0011\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013",
    "\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015",
    "\u0153\n\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u0157\n\u0015\u0003",
    "\u0015\u0005\u0015\u015a\n\u0015\u0003\u0015\u0003\u0015\u0005\u0015",
    "\u015e\n\u0015\u0003\u0015\u0005\u0015\u0161\n\u0015\u0003\u0015\u0005",
    "\u0015\u0164\n\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u0168\n\u0015",
    "\u0003\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0007\u001b",
    "\u017b\n\u001b\f\u001b\u000e\u001b\u017e\u000b\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u0185\n\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u018a\n\u001b\u0003",
    "\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003",
    "\u001f\u0003\u001f\u0005\u001f\u0194\n\u001f\u0003 \u0003 \u0003 \u0003",
    " \u0005 \u019a\n \u0003 \u0003 \u0003 \u0003 \u0005 \u01a0\n \u0003",
    " \u0005 \u01a3\n \u0003 \u0005 \u01a6\n \u0003 \u0003 \u0003 \u0003",
    " \u0005 \u01ac\n \u0003 \u0005 \u01af\n \u0003 \u0005 \u01b2\n \u0003",
    " \u0003 \u0003 \u0003 \u0005 \u01b8\n \u0003 \u0005 \u01bb\n \u0003",
    " \u0005 \u01be\n \u0003 \u0003 \u0003 \u0003 \u0005 \u01c4\n \u0003",
    " \u0005 \u01c7\n \u0003 \u0005 \u01ca\n \u0003 \u0003 \u0003 \u0003",
    " \u0005 \u01d0\n \u0003 \u0005 \u01d3\n \u0003 \u0005 \u01d6\n \u0003",
    " \u0003 \u0003 \u0003 \u0005 \u01dc\n \u0003 \u0005 \u01df\n \u0003",
    " \u0005 \u01e2\n \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0005 \u01ea",
    "\n \u0003 \u0005 \u01ed\n \u0003 \u0005 \u01f0\n \u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0003 \u0005 \u01f8\n \u0003 \u0005 \u01fb\n \u0003",
    " \u0005 \u01fe\n \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0005 \u0206",
    "\n \u0003 \u0005 \u0209\n \u0003 \u0005 \u020c\n \u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0005 \u0213\n \u0003 \u0005 \u0216\n \u0003 \u0005",
    " \u0219\n \u0003 \u0005 \u021c\n \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0005 \u0223\n \u0003 \u0005 \u0226\n \u0003 \u0005 \u0229\n \u0003",
    " \u0005 \u022c\n \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0005 \u0238\n \u0003 \u0003 \u0003 \u0005 \u023d\n",
    " \u0003 \u0003 \u0005 \u0241\n \u0003 \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0005 \u024a\n \u0003 \u0003 \u0005 \u024e\n \u0003 \u0003",
    " \u0003 \u0003 \u0005 \u0254\n \u0003 \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0003 \u0003 \u0003 \u0005 \u0261\n \u0003 \u0003 \u0003",
    " \u0005 \u0266\n \u0003 \u0003 \u0005 \u026a\n \u0003 \u0003 \u0005",
    " \u026e\n \u0003 \u0003 \u0003 \u0005 \u0273\n \u0003 \u0003 \u0005",
    " \u0277\n \u0003 \u0003 \u0005 \u027b\n \u0003 \u0003 \u0003 \u0005",
    " \u0280\n \u0003 \u0003 \u0005 \u0284\n \u0003 \u0003 \u0005 \u0288",
    "\n \u0003 \u0003 \u0003 \u0005 \u028d\n \u0003 \u0003 \u0005 \u0291",
    "\n \u0003 \u0003 \u0003 \u0003 \u0003 \u0007 \u0298\n \f \u000e \u029b",
    "\u000b \u0003 \u0003 \u0003 \u0003 \u0003 \u0005 \u02a2\n \u0003 \u0003",
    " \u0005 \u02a6\n \u0003 \u0003 \u0003 \u0003 \u0003 \u0007 \u02ad\n",
    " \f \u000e \u02b0\u000b \u0003 \u0003 \u0003 \u0003 \u0003 \u0005 \u02b7",
    "\n \u0003 \u0003 \u0005 \u02bb\n \u0005 \u02bd\n \u0003!\u0003!\u0003",
    "\"\u0003\"\u0003#\u0003#\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0005",
    "$\u02cb\n$\u0003%\u0003%\u0003&\u0007&\u02d0\n&\f&\u000e&\u02d3\u000b",
    "&\u0003\'\u0003\'\u0003\'\u0003\'\u0005\'\u02d9\n\'\u0003(\u0003(\u0003",
    "(\u0003(\u0003(\u0003(\u0003(\u0003(\u0005(\u02e3\n(\u0003(\u0002\u0002",
    ")\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a",
    "\u001c\u001e \"$&(*,.02468:<>@BDFHJLN\u0002\b\u0003\u0002\u0005\u0006",
    "\u0003\u0002\u0011\u0012\u0003\u0002\u0015\u0016\u0003\u0002 !\u0003",
    "\u000212\u0005\u0002\u0003\u0003\u001b\u001bVX\u0002\u035c\u0002S\u0003",
    "\u0002\u0002\u0002\u0004i\u0003\u0002\u0002\u0002\u0006k\u0003\u0002",
    "\u0002\u0002\bs\u0003\u0002\u0002\u0002\n\u0095\u0003\u0002\u0002\u0002",
    "\f\u0097\u0003\u0002\u0002\u0002\u000e\u0099\u0003\u0002\u0002\u0002",
    "\u0010\u00a7\u0003\u0002\u0002\u0002\u0012\u00b6\u0003\u0002\u0002\u0002",
    "\u0014\u00b8\u0003\u0002\u0002\u0002\u0016\u00bb\u0003\u0002\u0002\u0002",
    "\u0018\u00cf\u0003\u0002\u0002\u0002\u001a\u00d1\u0003\u0002\u0002\u0002",
    "\u001c\u00e3\u0003\u0002\u0002\u0002\u001e\u00ea\u0003\u0002\u0002\u0002",
    " \u0147\u0003\u0002\u0002\u0002\"\u0149\u0003\u0002\u0002\u0002$\u014b",
    "\u0003\u0002\u0002\u0002&\u014d\u0003\u0002\u0002\u0002(\u014f\u0003",
    "\u0002\u0002\u0002*\u0169\u0003\u0002\u0002\u0002,\u016b\u0003\u0002",
    "\u0002\u0002.\u016d\u0003\u0002\u0002\u00020\u016f\u0003\u0002\u0002",
    "\u00022\u0172\u0003\u0002\u0002\u00024\u0174\u0003\u0002\u0002\u0002",
    "6\u018b\u0003\u0002\u0002\u00028\u018d\u0003\u0002\u0002\u0002:\u018f",
    "\u0003\u0002\u0002\u0002<\u0191\u0003\u0002\u0002\u0002>\u02bc\u0003",
    "\u0002\u0002\u0002@\u02be\u0003\u0002\u0002\u0002B\u02c0\u0003\u0002",
    "\u0002\u0002D\u02c2\u0003\u0002\u0002\u0002F\u02ca\u0003\u0002\u0002",
    "\u0002H\u02cc\u0003\u0002\u0002\u0002J\u02d1\u0003\u0002\u0002\u0002",
    "L\u02d8\u0003\u0002\u0002\u0002N\u02e2\u0003\u0002\u0002\u0002PR\u0005",
    "\u0004\u0003\u0002QP\u0003\u0002\u0002\u0002RU\u0003\u0002\u0002\u0002",
    "SQ\u0003\u0002\u0002\u0002ST\u0003\u0002\u0002\u0002T\u0003\u0003\u0002",
    "\u0002\u0002US\u0003\u0002\u0002\u0002VW\u0005\b\u0005\u0002WX\u0007",
    "Q\u0002\u0002Xj\u0003\u0002\u0002\u0002YZ\u0005\u0006\u0004\u0002Z[",
    "\u0007Q\u0002\u0002[j\u0003\u0002\u0002\u0002\\]\u0005\u001a\u000e\u0002",
    "]^\u0007Q\u0002\u0002^j\u0003\u0002\u0002\u0002_`\u0005\u0016\f\u0002",
    "`a\u0007Q\u0002\u0002aj\u0003\u0002\u0002\u0002bc\u0005\u0014\u000b",
    "\u0002cd\u0007Q\u0002\u0002dj\u0003\u0002\u0002\u0002ef\u0005\u000e",
    "\b\u0002fg\u0007Q\u0002\u0002gj\u0003\u0002\u0002\u0002hj\u0007Q\u0002",
    "\u0002iV\u0003\u0002\u0002\u0002iY\u0003\u0002\u0002\u0002i\\\u0003",
    "\u0002\u0002\u0002i_\u0003\u0002\u0002\u0002ib\u0003\u0002\u0002\u0002",
    "ie\u0003\u0002\u0002\u0002ih\u0003\u0002\u0002\u0002j\u0005\u0003\u0002",
    "\u0002\u0002kl\u0007\u0004\u0002\u0002lo\t\u0002\u0002\u0002mn\u0007",
    "\u0007\u0002\u0002np\u0007\b\u0002\u0002om\u0003\u0002\u0002\u0002o",
    "p\u0003\u0002\u0002\u0002pq\u0003\u0002\u0002\u0002qr\u0005N(\u0002",
    "r\u0007\u0003\u0002\u0002\u0002st\u0007G\u0002\u0002tx\t\u0002\u0002",
    "\u0002uv\u0007\u0007\u0002\u0002vw\u0007\t\u0002\u0002wy\u0007\b\u0002",
    "\u0002xu\u0003\u0002\u0002\u0002xy\u0003\u0002\u0002\u0002yz\u0003\u0002",
    "\u0002\u0002z~\u0005N(\u0002{}\u0005\n\u0006\u0002|{\u0003\u0002\u0002",
    "\u0002}\u0080\u0003\u0002\u0002\u0002~|\u0003\u0002\u0002\u0002~\u007f",
    "\u0003\u0002\u0002\u0002\u007f\t\u0003\u0002\u0002\u0002\u0080~\u0003",
    "\u0002\u0002\u0002\u0081\u0083\u0007\n\u0002\u0002\u0082\u0081\u0003",
    "\u0002\u0002\u0002\u0082\u0083\u0003\u0002\u0002\u0002\u0083\u0084\u0003",
    "\u0002\u0002\u0002\u0084\u0085\u0007\u000b\u0002\u0002\u0085\u0087\u0007",
    "\f\u0002\u0002\u0086\u0088\u0007K\u0002\u0002\u0087\u0086\u0003\u0002",
    "\u0002\u0002\u0087\u0088\u0003\u0002\u0002\u0002\u0088\u0089\u0003\u0002",
    "\u0002\u0002\u0089\u0096\u0005B\"\u0002\u008a\u008c\u0007\n\u0002\u0002",
    "\u008b\u008a\u0003\u0002\u0002\u0002\u008b\u008c\u0003\u0002\u0002\u0002",
    "\u008c\u008d\u0003\u0002\u0002\u0002\u008d\u008f\u0007\r\u0002\u0002",
    "\u008e\u0090\u0007K\u0002\u0002\u008f\u008e\u0003\u0002\u0002\u0002",
    "\u008f\u0090\u0003\u0002\u0002\u0002\u0090\u0091\u0003\u0002\u0002\u0002",
    "\u0091\u0096\u0005D#\u0002\u0092\u0093\u0007\u0019\u0002\u0002\u0093",
    "\u0094\u0007K\u0002\u0002\u0094\u0096\u0005\f\u0007\u0002\u0095\u0082",
    "\u0003\u0002\u0002\u0002\u0095\u008b\u0003\u0002\u0002\u0002\u0095\u0092",
    "\u0003\u0002\u0002\u0002\u0096\u000b\u0003\u0002\u0002\u0002\u0097\u0098",
    "\u0007X\u0002\u0002\u0098\r\u0003\u0002\u0002\u0002\u0099\u009f\u0007",
    "\f\u0002\u0002\u009a\u009b\u0005\u0010\t\u0002\u009b\u009c\u0007P\u0002",
    "\u0002\u009c\u009e\u0003\u0002\u0002\u0002\u009d\u009a\u0003\u0002\u0002",
    "\u0002\u009e\u00a1\u0003\u0002\u0002\u0002\u009f\u009d\u0003\u0002\u0002",
    "\u0002\u009f\u00a0\u0003\u0002\u0002\u0002\u00a0\u00a2\u0003\u0002\u0002",
    "\u0002\u00a1\u009f\u0003\u0002\u0002\u0002\u00a2\u00a3\u0005\u0010\t",
    "\u0002\u00a3\u000f\u0003\u0002\u0002\u0002\u00a4\u00a6\u0007O\u0002",
    "\u0002\u00a5\u00a4\u0003\u0002\u0002\u0002\u00a6\u00a9\u0003\u0002\u0002",
    "\u0002\u00a7\u00a5\u0003\u0002\u0002\u0002\u00a7\u00a8\u0003\u0002\u0002",
    "\u0002\u00a8\u00aa\u0003\u0002\u0002\u0002\u00a9\u00a7\u0003\u0002\u0002",
    "\u0002\u00aa\u00ab\u0007U\u0002\u0002\u00ab\u00b4\u0007K\u0002\u0002",
    "\u00ac\u00b5\u0005\u0012\n\u0002\u00ad\u00af\u0007O\u0002\u0002\u00ae",
    "\u00ad\u0003\u0002\u0002\u0002\u00af\u00b2\u0003\u0002\u0002\u0002\u00b0",
    "\u00ae\u0003\u0002\u0002\u0002\u00b0\u00b1\u0003\u0002\u0002\u0002\u00b1",
    "\u00b3\u0003\u0002\u0002\u0002\u00b2\u00b0\u0003\u0002\u0002\u0002\u00b3",
    "\u00b5\u0007U\u0002\u0002\u00b4\u00ac\u0003\u0002\u0002\u0002\u00b4",
    "\u00b0\u0003\u0002\u0002\u0002\u00b5\u0011\u0003\u0002\u0002\u0002\u00b6",
    "\u00b7\u0005H%\u0002\u00b7\u0013\u0003\u0002\u0002\u0002\u00b8\u00b9",
    "\u0007\u000e\u0002\u0002\u00b9\u00ba\u0005N(\u0002\u00ba\u0015\u0003",
    "\u0002\u0002\u0002\u00bb\u00bd\u0007\u0004\u0002\u0002\u00bc\u00be\u0007",
    "\u000f\u0002\u0002\u00bd\u00bc\u0003\u0002\u0002\u0002\u00bd\u00be\u0003",
    "\u0002\u0002\u0002\u00be\u00bf\u0003\u0002\u0002\u0002\u00bf\u00c2\u0007",
    "\u0010\u0002\u0002\u00c0\u00c1\u0007\u0007\u0002\u0002\u00c1\u00c3\u0007",
    "\b\u0002\u0002\u00c2\u00c0\u0003\u0002\u0002\u0002\u00c2\u00c3\u0003",
    "\u0002\u0002\u0002\u00c3\u00c4\u0003\u0002\u0002\u0002\u00c4\u00c9\u0005",
    "\u0018\r\u0002\u00c5\u00c6\u0007P\u0002\u0002\u00c6\u00c8\u0005\u0018",
    "\r\u0002\u00c7\u00c5\u0003\u0002\u0002\u0002\u00c8\u00cb\u0003\u0002",
    "\u0002\u0002\u00c9\u00c7\u0003\u0002\u0002\u0002\u00c9\u00ca\u0003\u0002",
    "\u0002\u0002\u00ca\u00cd\u0003\u0002\u0002\u0002\u00cb\u00c9\u0003\u0002",
    "\u0002\u0002\u00cc\u00ce\t\u0003\u0002\u0002\u00cd\u00cc\u0003\u0002",
    "\u0002\u0002\u00cd\u00ce\u0003\u0002\u0002\u0002\u00ce\u0017\u0003\u0002",
    "\u0002\u0002\u00cf\u00d0\u0005N(\u0002\u00d0\u0019\u0003\u0002\u0002",
    "\u0002\u00d1\u00d3\u0007G\u0002\u0002\u00d2\u00d4\u0007\u000f\u0002",
    "\u0002\u00d3\u00d2\u0003\u0002\u0002\u0002\u00d3\u00d4\u0003\u0002\u0002",
    "\u0002\u00d4\u00d5\u0003\u0002\u0002\u0002\u00d5\u00d9\u0007\u0010\u0002",
    "\u0002\u00d6\u00d7\u0007\u0007\u0002\u0002\u00d7\u00d8\u0007\t\u0002",
    "\u0002\u00d8\u00da\u0007\b\u0002\u0002\u00d9\u00d6\u0003\u0002\u0002",
    "\u0002\u00d9\u00da\u0003\u0002\u0002\u0002\u00da\u00db\u0003\u0002\u0002",
    "\u0002\u00db\u00dc\u0005\u001c\u000f\u0002\u00dc\u00de\u0007R\u0002",
    "\u0002\u00dd\u00df\u0005\u001e\u0010\u0002\u00de\u00dd\u0003\u0002\u0002",
    "\u0002\u00de\u00df\u0003\u0002\u0002\u0002\u00df\u00e0\u0003\u0002\u0002",
    "\u0002\u00e0\u00e1\u0007S\u0002\u0002\u00e1\u00e2\u0005J&\u0002\u00e2",
    "\u001b\u0003\u0002\u0002\u0002\u00e3\u00e4\u0005N(\u0002\u00e4\u001d",
    "\u0003\u0002\u0002\u0002\u00e5\u00e6\u0005 \u0011\u0002\u00e6\u00e7",
    "\u0007P\u0002\u0002\u00e7\u00e9\u0003\u0002\u0002\u0002\u00e8\u00e5",
    "\u0003\u0002\u0002\u0002\u00e9\u00ec\u0003\u0002\u0002\u0002\u00ea\u00e8",
    "\u0003\u0002\u0002\u0002\u00ea\u00eb\u0003\u0002\u0002\u0002\u00eb\u00ed",
    "\u0003\u0002\u0002\u0002\u00ec\u00ea\u0003\u0002\u0002\u0002\u00ed\u00ee",
    "\u0005 \u0011\u0002\u00ee\u001f\u0003\u0002\u0002\u0002\u00ef\u00f0",
    "\u0005\"\u0012\u0002\u00f0\u00f1\u0005(\u0015\u0002\u00f1\u0148\u0003",
    "\u0002\u0002\u0002\u00f2\u00f4\u0007\u0013\u0002\u0002\u00f3\u00f5\u0005",
    "$\u0013\u0002\u00f4\u00f3\u0003\u0002\u0002\u0002\u00f4\u00f5\u0003",
    "\u0002\u0002\u0002\u00f5\u00f7\u0003\u0002\u0002\u0002\u00f6\u00f2\u0003",
    "\u0002\u0002\u0002\u00f6\u00f7\u0003\u0002\u0002\u0002\u00f7\u00f8\u0003",
    "\u0002\u0002\u0002\u00f8\u00f9\u0007\u0014\u0002\u0002\u00f9\u00fa\u0007",
    "\u0015\u0002\u0002\u00fa\u0100\u0007R\u0002\u0002\u00fb\u00fc\u0005",
    "<\u001f\u0002\u00fc\u00fd\u0007P\u0002\u0002\u00fd\u00ff\u0003\u0002",
    "\u0002\u0002\u00fe\u00fb\u0003\u0002\u0002\u0002\u00ff\u0102\u0003\u0002",
    "\u0002\u0002\u0100\u00fe\u0003\u0002\u0002\u0002\u0100\u0101\u0003\u0002",
    "\u0002\u0002\u0101\u0103\u0003\u0002\u0002\u0002\u0102\u0100\u0003\u0002",
    "\u0002\u0002\u0103\u0104\u0005<\u001f\u0002\u0104\u0105\u0007S\u0002",
    "\u0002\u0105\u0148\u0003\u0002\u0002\u0002\u0106\u0108\t\u0004\u0002",
    "\u0002\u0107\u0109\u0005$\u0013\u0002\u0108\u0107\u0003\u0002\u0002",
    "\u0002\u0108\u0109\u0003\u0002\u0002\u0002\u0109\u010a\u0003\u0002\u0002",
    "\u0002\u010a\u0110\u0007R\u0002\u0002\u010b\u010c\u0005<\u001f\u0002",
    "\u010c\u010d\u0007P\u0002\u0002\u010d\u010f\u0003\u0002\u0002\u0002",
    "\u010e\u010b\u0003\u0002\u0002\u0002\u010f\u0112\u0003\u0002\u0002\u0002",
    "\u0110\u010e\u0003\u0002\u0002\u0002\u0110\u0111\u0003\u0002\u0002\u0002",
    "\u0111\u0113\u0003\u0002\u0002\u0002\u0112\u0110\u0003\u0002\u0002\u0002",
    "\u0113\u0114\u0005<\u001f\u0002\u0114\u0115\u0007S\u0002\u0002\u0115",
    "\u0148\u0003\u0002\u0002\u0002\u0116\u0118\u0007\u0013\u0002\u0002\u0117",
    "\u0119\u0005$\u0013\u0002\u0118\u0117\u0003\u0002\u0002\u0002\u0118",
    "\u0119\u0003\u0002\u0002\u0002\u0119\u011b\u0003\u0002\u0002\u0002\u011a",
    "\u0116\u0003\u0002\u0002\u0002\u011a\u011b\u0003\u0002\u0002\u0002\u011b",
    "\u011c\u0003\u0002\u0002\u0002\u011c\u011e\u0007\u0017\u0002\u0002\u011d",
    "\u011f\t\u0004\u0002\u0002\u011e\u011d\u0003\u0002\u0002\u0002\u011e",
    "\u011f\u0003\u0002\u0002\u0002\u011f\u0121\u0003\u0002\u0002\u0002\u0120",
    "\u0122\u0005&\u0014\u0002\u0121\u0120\u0003\u0002\u0002\u0002\u0121",
    "\u0122\u0003\u0002\u0002\u0002\u0122\u0123\u0003\u0002\u0002\u0002\u0123",
    "\u0129\u0007R\u0002\u0002\u0124\u0125\u0005<\u001f\u0002\u0125\u0126",
    "\u0007P\u0002\u0002\u0126\u0128\u0003\u0002\u0002\u0002\u0127\u0124",
    "\u0003\u0002\u0002\u0002\u0128\u012b\u0003\u0002\u0002\u0002\u0129\u0127",
    "\u0003\u0002\u0002\u0002\u0129\u012a\u0003\u0002\u0002\u0002\u012a\u012c",
    "\u0003\u0002\u0002\u0002\u012b\u0129\u0003\u0002\u0002\u0002\u012c\u012d",
    "\u0005<\u001f\u0002\u012d\u012e\u0007S\u0002\u0002\u012e\u0148\u0003",
    "\u0002\u0002\u0002\u012f\u0131\u0007\u0013\u0002\u0002\u0130\u0132\u0005",
    "$\u0013\u0002\u0131\u0130\u0003\u0002\u0002\u0002\u0131\u0132\u0003",
    "\u0002\u0002\u0002\u0132\u0134\u0003\u0002\u0002\u0002\u0133\u012f\u0003",
    "\u0002\u0002\u0002\u0133\u0134\u0003\u0002\u0002\u0002\u0134\u0135\u0003",
    "\u0002\u0002\u0002\u0135\u0136\u0007\u0018\u0002\u0002\u0136\u0138\u0007",
    "\u0015\u0002\u0002\u0137\u0139\u0005&\u0014\u0002\u0138\u0137\u0003",
    "\u0002\u0002\u0002\u0138\u0139\u0003\u0002\u0002\u0002\u0139\u013a\u0003",
    "\u0002\u0002\u0002\u013a\u0140\u0007R\u0002\u0002\u013b\u013c\u0005",
    "<\u001f\u0002\u013c\u013d\u0007P\u0002\u0002\u013d\u013f\u0003\u0002",
    "\u0002\u0002\u013e\u013b\u0003\u0002\u0002\u0002\u013f\u0142\u0003\u0002",
    "\u0002\u0002\u0140\u013e\u0003\u0002\u0002\u0002\u0140\u0141\u0003\u0002",
    "\u0002\u0002\u0141\u0143\u0003\u0002\u0002\u0002\u0142\u0140\u0003\u0002",
    "\u0002\u0002\u0143\u0144\u0005<\u001f\u0002\u0144\u0145\u0007S\u0002",
    "\u0002\u0145\u0146\u00054\u001b\u0002\u0146\u0148\u0003\u0002\u0002",
    "\u0002\u0147\u00ef\u0003\u0002\u0002\u0002\u0147\u00f6\u0003\u0002\u0002",
    "\u0002\u0147\u0106\u0003\u0002\u0002\u0002\u0147\u011a\u0003\u0002\u0002",
    "\u0002\u0147\u0133\u0003\u0002\u0002\u0002\u0148!\u0003\u0002\u0002",
    "\u0002\u0149\u014a\u0005N(\u0002\u014a#\u0003\u0002\u0002\u0002\u014b",
    "\u014c\u0005N(\u0002\u014c%\u0003\u0002\u0002\u0002\u014d\u014e\u0005",
    "N(\u0002\u014e\'\u0003\u0002\u0002\u0002\u014f\u0152\u0005> \u0002\u0150",
    "\u0153\u0005.\u0018\u0002\u0151\u0153\u00050\u0019\u0002\u0152\u0150",
    "\u0003\u0002\u0002\u0002\u0152\u0151\u0003\u0002\u0002\u0002\u0152\u0153",
    "\u0003\u0002\u0002\u0002\u0153\u0156\u0003\u0002\u0002\u0002\u0154\u0155",
    "\u0007\n\u0002\u0002\u0155\u0157\u0005,\u0017\u0002\u0156\u0154\u0003",
    "\u0002\u0002\u0002\u0156\u0157\u0003\u0002\u0002\u0002\u0157\u0159\u0003",
    "\u0002\u0002\u0002\u0158\u015a\u0005*\u0016\u0002\u0159\u0158\u0003",
    "\u0002\u0002\u0002\u0159\u015a\u0003\u0002\u0002\u0002\u015a\u0163\u0003",
    "\u0002\u0002\u0002\u015b\u015d\u0007\u0017\u0002\u0002\u015c\u015e\u0007",
    "\u0015\u0002\u0002\u015d\u015c\u0003\u0002\u0002\u0002\u015d\u015e\u0003",
    "\u0002\u0002\u0002\u015e\u0164\u0003\u0002\u0002\u0002\u015f\u0161\u0007",
    "\u0014\u0002\u0002\u0160\u015f\u0003\u0002\u0002\u0002\u0160\u0161\u0003",
    "\u0002\u0002\u0002\u0161\u0162\u0003\u0002\u0002\u0002\u0162\u0164\u0007",
    "\u0015\u0002\u0002\u0163\u015b\u0003\u0002\u0002\u0002\u0163\u0160\u0003",
    "\u0002\u0002\u0002\u0163\u0164\u0003\u0002\u0002\u0002\u0164\u0167\u0003",
    "\u0002\u0002\u0002\u0165\u0166\u0007\u0019\u0002\u0002\u0166\u0168\u0005",
    "2\u001a\u0002\u0167\u0165\u0003\u0002\u0002\u0002\u0167\u0168\u0003",
    "\u0002\u0002\u0002\u0168)\u0003\u0002\u0002\u0002\u0169\u016a\u0007",
    "\u001a\u0002\u0002\u016a+\u0003\u0002\u0002\u0002\u016b\u016c\u0005",
    "H%\u0002\u016c-\u0003\u0002\u0002\u0002\u016d\u016e\u0007\u001b\u0002",
    "\u0002\u016e/\u0003\u0002\u0002\u0002\u016f\u0170\u0007\t\u0002\u0002",
    "\u0170\u0171\u0007\u001b\u0002\u0002\u01711\u0003\u0002\u0002\u0002",
    "\u0172\u0173\u0007X\u0002\u0002\u01733\u0003\u0002\u0002\u0002\u0174",
    "\u0175\u0007\u001c\u0002\u0002\u0175\u0176\u0005:\u001e\u0002\u0176",
    "\u017c\u0007R\u0002\u0002\u0177\u0178\u0005<\u001f\u0002\u0178\u0179",
    "\u0007P\u0002\u0002\u0179\u017b\u0003\u0002\u0002\u0002\u017a\u0177",
    "\u0003\u0002\u0002\u0002\u017b\u017e\u0003\u0002\u0002\u0002\u017c\u017a",
    "\u0003\u0002\u0002\u0002\u017c\u017d\u0003\u0002\u0002\u0002\u017d\u017f",
    "\u0003\u0002\u0002\u0002\u017e\u017c\u0003\u0002\u0002\u0002\u017f\u0180",
    "\u0005<\u001f\u0002\u0180\u0184\u0007S\u0002\u0002\u0181\u0182\u0007",
    "\u001d\u0002\u0002\u0182\u0183\u0007\u001e\u0002\u0002\u0183\u0185\u0005",
    "6\u001c\u0002\u0184\u0181\u0003\u0002\u0002\u0002\u0184\u0185\u0003",
    "\u0002\u0002\u0002\u0185\u0189\u0003\u0002\u0002\u0002\u0186\u0187\u0007",
    "\u001d\u0002\u0002\u0187\u0188\u0007\u001f\u0002\u0002\u0188\u018a\u0005",
    "8\u001d\u0002\u0189\u0186\u0003\u0002\u0002\u0002\u0189\u018a\u0003",
    "\u0002\u0002\u0002\u018a5\u0003\u0002\u0002\u0002\u018b\u018c\u0005",
    "F$\u0002\u018c7\u0003\u0002\u0002\u0002\u018d\u018e\u0005F$\u0002\u018e",
    "9\u0003\u0002\u0002\u0002\u018f\u0190\u0005N(\u0002\u0190;\u0003\u0002",
    "\u0002\u0002\u0191\u0193\u0005N(\u0002\u0192\u0194\t\u0005\u0002\u0002",
    "\u0193\u0192\u0003\u0002\u0002\u0002\u0193\u0194\u0003\u0002\u0002\u0002",
    "\u0194=\u0003\u0002\u0002\u0002\u0195\u0199\u0007\"\u0002\u0002\u0196",
    "\u0197\u0007R\u0002\u0002\u0197\u0198\u0007V\u0002\u0002\u0198\u019a",
    "\u0007S\u0002\u0002\u0199\u0196\u0003\u0002\u0002\u0002\u0199\u019a",
    "\u0003\u0002\u0002\u0002\u019a\u02bd\u0003\u0002\u0002\u0002\u019b\u019f",
    "\u0007#\u0002\u0002\u019c\u019d\u0007R\u0002\u0002\u019d\u019e\u0007",
    "V\u0002\u0002\u019e\u01a0\u0007S\u0002\u0002\u019f\u019c\u0003\u0002",
    "\u0002\u0002\u019f\u01a0\u0003\u0002\u0002\u0002\u01a0\u01a2\u0003\u0002",
    "\u0002\u0002\u01a1\u01a3\u0007$\u0002\u0002\u01a2\u01a1\u0003\u0002",
    "\u0002\u0002\u01a2\u01a3\u0003\u0002\u0002\u0002\u01a3\u01a5\u0003\u0002",
    "\u0002\u0002\u01a4\u01a6\u0007&\u0002\u0002\u01a5\u01a4\u0003\u0002",
    "\u0002\u0002\u01a5\u01a6\u0003\u0002\u0002\u0002\u01a6\u02bd\u0003\u0002",
    "\u0002\u0002\u01a7\u01ab\u0007\'\u0002\u0002\u01a8\u01a9\u0007R\u0002",
    "\u0002\u01a9\u01aa\u0007V\u0002\u0002\u01aa\u01ac\u0007S\u0002\u0002",
    "\u01ab\u01a8\u0003\u0002\u0002\u0002\u01ab\u01ac\u0003\u0002\u0002\u0002",
    "\u01ac\u01ae\u0003\u0002\u0002\u0002\u01ad\u01af\u0007$\u0002\u0002",
    "\u01ae\u01ad\u0003\u0002\u0002\u0002\u01ae\u01af\u0003\u0002\u0002\u0002",
    "\u01af\u01b1\u0003\u0002\u0002\u0002\u01b0\u01b2\u0007&\u0002\u0002",
    "\u01b1\u01b0\u0003\u0002\u0002\u0002\u01b1\u01b2\u0003\u0002\u0002\u0002",
    "\u01b2\u02bd\u0003\u0002\u0002\u0002\u01b3\u01b7\u0007(\u0002\u0002",
    "\u01b4\u01b5\u0007R\u0002\u0002\u01b5\u01b6\u0007V\u0002\u0002\u01b6",
    "\u01b8\u0007S\u0002\u0002\u01b7\u01b4\u0003\u0002\u0002\u0002\u01b7",
    "\u01b8\u0003\u0002\u0002\u0002\u01b8\u01ba\u0003\u0002\u0002\u0002\u01b9",
    "\u01bb\u0007$\u0002\u0002\u01ba\u01b9\u0003\u0002\u0002\u0002\u01ba",
    "\u01bb\u0003\u0002\u0002\u0002\u01bb\u01bd\u0003\u0002\u0002\u0002\u01bc",
    "\u01be\u0007&\u0002\u0002\u01bd\u01bc\u0003\u0002\u0002\u0002\u01bd",
    "\u01be\u0003\u0002\u0002\u0002\u01be\u02bd\u0003\u0002\u0002\u0002\u01bf",
    "\u01c3\u0007)\u0002\u0002\u01c0\u01c1\u0007R\u0002\u0002\u01c1\u01c2",
    "\u0007V\u0002\u0002\u01c2\u01c4\u0007S\u0002\u0002\u01c3\u01c0\u0003",
    "\u0002\u0002\u0002\u01c3\u01c4\u0003\u0002\u0002\u0002\u01c4\u01c6\u0003",
    "\u0002\u0002\u0002\u01c5\u01c7\u0007$\u0002\u0002\u01c6\u01c5\u0003",
    "\u0002\u0002\u0002\u01c6\u01c7\u0003\u0002\u0002\u0002\u01c7\u01c9\u0003",
    "\u0002\u0002\u0002\u01c8\u01ca\u0007&\u0002\u0002\u01c9\u01c8\u0003",
    "\u0002\u0002\u0002\u01c9\u01ca\u0003\u0002\u0002\u0002\u01ca\u02bd\u0003",
    "\u0002\u0002\u0002\u01cb\u01cf\u0007*\u0002\u0002\u01cc\u01cd\u0007",
    "R\u0002\u0002\u01cd\u01ce\u0007V\u0002\u0002\u01ce\u01d0\u0007S\u0002",
    "\u0002\u01cf\u01cc\u0003\u0002\u0002\u0002\u01cf\u01d0\u0003\u0002\u0002",
    "\u0002\u01d0\u01d2\u0003\u0002\u0002\u0002\u01d1\u01d3\u0007$\u0002",
    "\u0002\u01d2\u01d1\u0003\u0002\u0002\u0002\u01d2\u01d3\u0003\u0002\u0002",
    "\u0002\u01d3\u01d5\u0003\u0002\u0002\u0002\u01d4\u01d6\u0007&\u0002",
    "\u0002\u01d5\u01d4\u0003\u0002\u0002\u0002\u01d5\u01d6\u0003\u0002\u0002",
    "\u0002\u01d6\u02bd\u0003\u0002\u0002\u0002\u01d7\u01db\u0007+\u0002",
    "\u0002\u01d8\u01d9\u0007R\u0002\u0002\u01d9\u01da\u0007V\u0002\u0002",
    "\u01da\u01dc\u0007S\u0002\u0002\u01db\u01d8\u0003\u0002\u0002\u0002",
    "\u01db\u01dc\u0003\u0002\u0002\u0002\u01dc\u01de\u0003\u0002\u0002\u0002",
    "\u01dd\u01df\u0007$\u0002\u0002\u01de\u01dd\u0003\u0002\u0002\u0002",
    "\u01de\u01df\u0003\u0002\u0002\u0002\u01df\u01e1\u0003\u0002\u0002\u0002",
    "\u01e0\u01e2\u0007&\u0002\u0002\u01e1\u01e0\u0003\u0002\u0002\u0002",
    "\u01e1\u01e2\u0003\u0002\u0002\u0002\u01e2\u02bd\u0003\u0002\u0002\u0002",
    "\u01e3\u01e9\u0007,\u0002\u0002\u01e4\u01e5\u0007R\u0002\u0002\u01e5",
    "\u01e6\u0007V\u0002\u0002\u01e6\u01e7\u0007P\u0002\u0002\u01e7\u01e8",
    "\u0007V\u0002\u0002\u01e8\u01ea\u0007S\u0002\u0002\u01e9\u01e4\u0003",
    "\u0002\u0002\u0002\u01e9\u01ea\u0003\u0002\u0002\u0002\u01ea\u01ec\u0003",
    "\u0002\u0002\u0002\u01eb\u01ed\u0007$\u0002\u0002\u01ec\u01eb\u0003",
    "\u0002\u0002\u0002\u01ec\u01ed\u0003\u0002\u0002\u0002\u01ed\u01ef\u0003",
    "\u0002\u0002\u0002\u01ee\u01f0\u0007&\u0002\u0002\u01ef\u01ee\u0003",
    "\u0002\u0002\u0002\u01ef\u01f0\u0003\u0002\u0002\u0002\u01f0\u02bd\u0003",
    "\u0002\u0002\u0002\u01f1\u01f7\u0007-\u0002\u0002\u01f2\u01f3\u0007",
    "R\u0002\u0002\u01f3\u01f4\u0007V\u0002\u0002\u01f4\u01f5\u0007P\u0002",
    "\u0002\u01f5\u01f6\u0007V\u0002\u0002\u01f6\u01f8\u0007S\u0002\u0002",
    "\u01f7\u01f2\u0003\u0002\u0002\u0002\u01f7\u01f8\u0003\u0002\u0002\u0002",
    "\u01f8\u01fa\u0003\u0002\u0002\u0002\u01f9\u01fb\u0007$\u0002\u0002",
    "\u01fa\u01f9\u0003\u0002\u0002\u0002\u01fa\u01fb\u0003\u0002\u0002\u0002",
    "\u01fb\u01fd\u0003\u0002\u0002\u0002\u01fc\u01fe\u0007&\u0002\u0002",
    "\u01fd\u01fc\u0003\u0002\u0002\u0002\u01fd\u01fe\u0003\u0002\u0002\u0002",
    "\u01fe\u02bd\u0003\u0002\u0002\u0002\u01ff\u0205\u0007.\u0002\u0002",
    "\u0200\u0201\u0007R\u0002\u0002\u0201\u0202\u0007V\u0002\u0002\u0202",
    "\u0203\u0007P\u0002\u0002\u0203\u0204\u0007V\u0002\u0002\u0204\u0206",
    "\u0007S\u0002\u0002\u0205\u0200\u0003\u0002\u0002\u0002\u0205\u0206",
    "\u0003\u0002\u0002\u0002\u0206\u0208\u0003\u0002\u0002\u0002\u0207\u0209",
    "\u0007$\u0002\u0002\u0208\u0207\u0003\u0002\u0002\u0002\u0208\u0209",
    "\u0003\u0002\u0002\u0002\u0209\u020b\u0003\u0002\u0002\u0002\u020a\u020c",
    "\u0007&\u0002\u0002\u020b\u020a\u0003\u0002\u0002\u0002\u020b\u020c",
    "\u0003\u0002\u0002\u0002\u020c\u02bd\u0003\u0002\u0002\u0002\u020d\u0215",
    "\u0007/\u0002\u0002\u020e\u020f\u0007R\u0002\u0002\u020f\u0212\u0007",
    "V\u0002\u0002\u0210\u0211\u0007P\u0002\u0002\u0211\u0213\u0007V\u0002",
    "\u0002\u0212\u0210\u0003\u0002\u0002\u0002\u0212\u0213\u0003\u0002\u0002",
    "\u0002\u0213\u0214\u0003\u0002\u0002\u0002\u0214\u0216\u0007S\u0002",
    "\u0002\u0215\u020e\u0003\u0002\u0002\u0002\u0215\u0216\u0003\u0002\u0002",
    "\u0002\u0216\u0218\u0003\u0002\u0002\u0002\u0217\u0219\u0007$\u0002",
    "\u0002\u0218\u0217\u0003\u0002\u0002\u0002\u0218\u0219\u0003\u0002\u0002",
    "\u0002\u0219\u021b\u0003\u0002\u0002\u0002\u021a\u021c\u0007&\u0002",
    "\u0002\u021b\u021a\u0003\u0002\u0002\u0002\u021b\u021c\u0003\u0002\u0002",
    "\u0002\u021c\u02bd\u0003\u0002\u0002\u0002\u021d\u0225\u00070\u0002",
    "\u0002\u021e\u021f\u0007R\u0002\u0002\u021f\u0222\u0007V\u0002\u0002",
    "\u0220\u0221\u0007P\u0002\u0002\u0221\u0223\u0007V\u0002\u0002\u0222",
    "\u0220\u0003\u0002\u0002\u0002\u0222\u0223\u0003\u0002\u0002\u0002\u0223",
    "\u0224\u0003\u0002\u0002\u0002\u0224\u0226\u0007S\u0002\u0002\u0225",
    "\u021e\u0003\u0002\u0002\u0002\u0225\u0226\u0003\u0002\u0002\u0002\u0226",
    "\u0228\u0003\u0002\u0002\u0002\u0227\u0229\u0007$\u0002\u0002\u0228",
    "\u0227\u0003\u0002\u0002\u0002\u0228\u0229\u0003\u0002\u0002\u0002\u0229",
    "\u022b\u0003\u0002\u0002\u0002\u022a\u022c\u0007&\u0002\u0002\u022b",
    "\u022a\u0003\u0002\u0002\u0002\u022b\u022c\u0003\u0002\u0002\u0002\u022c",
    "\u02bd\u0003\u0002\u0002\u0002\u022d\u02bd\t\u0006\u0002\u0002\u022e",
    "\u02bd\u00073\u0002\u0002\u022f\u02bd\u00074\u0002\u0002\u0230\u02bd",
    "\u00075\u0002\u0002\u0231\u02bd\u00076\u0002\u0002\u0232\u02bd\u0007",
    "7\u0002\u0002\u0233\u0237\u00078\u0002\u0002\u0234\u0235\u0007R\u0002",
    "\u0002\u0235\u0236\u0007V\u0002\u0002\u0236\u0238\u0007S\u0002\u0002",
    "\u0237\u0234\u0003\u0002\u0002\u0002\u0237\u0238\u0003\u0002\u0002\u0002",
    "\u0238\u023c\u0003\u0002\u0002\u0002\u0239\u023a\u0007\u000b\u0002\u0002",
    "\u023a\u023b\u0007\f\u0002\u0002\u023b\u023d\u0005B\"\u0002\u023c\u0239",
    "\u0003\u0002\u0002\u0002\u023c\u023d\u0003\u0002\u0002\u0002\u023d\u0240",
    "\u0003\u0002\u0002\u0002\u023e\u023f\u0007\r\u0002\u0002\u023f\u0241",
    "\u0005D#\u0002\u0240\u023e\u0003\u0002\u0002\u0002\u0240\u0241\u0003",
    "\u0002\u0002\u0002\u0241\u02bd\u0003\u0002\u0002\u0002\u0242\u0243\u0007",
    "9\u0002\u0002\u0243\u0244\u0007R\u0002\u0002\u0244\u0245\u0007V\u0002",
    "\u0002\u0245\u0249\u0007S\u0002\u0002\u0246\u0247\u0007\u000b\u0002",
    "\u0002\u0247\u0248\u0007\f\u0002\u0002\u0248\u024a\u0005B\"\u0002\u0249",
    "\u0246\u0003\u0002\u0002\u0002\u0249\u024a\u0003\u0002\u0002\u0002\u024a",
    "\u024d\u0003\u0002\u0002\u0002\u024b\u024c\u0007\r\u0002\u0002\u024c",
    "\u024e\u0005D#\u0002\u024d\u024b\u0003\u0002\u0002\u0002\u024d\u024e",
    "\u0003\u0002\u0002\u0002\u024e\u02bd\u0003\u0002\u0002\u0002\u024f\u0253",
    "\u0007%\u0002\u0002\u0250\u0251\u0007R\u0002\u0002\u0251\u0252\u0007",
    "V\u0002\u0002\u0252\u0254\u0007S\u0002\u0002\u0253\u0250\u0003\u0002",
    "\u0002\u0002\u0253\u0254\u0003\u0002\u0002\u0002\u0254\u02bd\u0003\u0002",
    "\u0002\u0002\u0255\u0256\u0007:\u0002\u0002\u0256\u0257\u0007R\u0002",
    "\u0002\u0257\u0258\u0007V\u0002\u0002\u0258\u02bd\u0007S\u0002\u0002",
    "\u0259\u02bd\u0007;\u0002\u0002\u025a\u02bd\u0007<\u0002\u0002\u025b",
    "\u02bd\u0007=\u0002\u0002\u025c\u02bd\u0007>\u0002\u0002\u025d\u02bd",
    "\u0007?\u0002\u0002\u025e\u0260\u0007@\u0002\u0002\u025f\u0261\u0007",
    "%\u0002\u0002\u0260\u025f\u0003\u0002\u0002\u0002\u0260\u0261\u0003",
    "\u0002\u0002\u0002\u0261\u0265\u0003\u0002\u0002\u0002\u0262\u0263\u0007",
    "\u000b\u0002\u0002\u0263\u0264\u0007\f\u0002\u0002\u0264\u0266\u0005",
    "B\"\u0002\u0265\u0262\u0003\u0002\u0002\u0002\u0265\u0266\u0003\u0002",
    "\u0002\u0002\u0266\u0269\u0003\u0002\u0002\u0002\u0267\u0268\u0007\r",
    "\u0002\u0002\u0268\u026a\u0005D#\u0002\u0269\u0267\u0003\u0002\u0002",
    "\u0002\u0269\u026a\u0003\u0002\u0002\u0002\u026a\u02bd\u0003\u0002\u0002",
    "\u0002\u026b\u026d\u0007A\u0002\u0002\u026c\u026e\u0007%\u0002\u0002",
    "\u026d\u026c\u0003\u0002\u0002\u0002\u026d\u026e\u0003\u0002\u0002\u0002",
    "\u026e\u0272\u0003\u0002\u0002\u0002\u026f\u0270\u0007\u000b\u0002\u0002",
    "\u0270\u0271\u0007\f\u0002\u0002\u0271\u0273\u0005B\"\u0002\u0272\u026f",
    "\u0003\u0002\u0002\u0002\u0272\u0273\u0003\u0002\u0002\u0002\u0273\u0276",
    "\u0003\u0002\u0002\u0002\u0274\u0275\u0007\r\u0002\u0002\u0275\u0277",
    "\u0005D#\u0002\u0276\u0274\u0003\u0002\u0002\u0002\u0276\u0277\u0003",
    "\u0002\u0002\u0002\u0277\u02bd\u0003\u0002\u0002\u0002\u0278\u027a\u0007",
    "B\u0002\u0002\u0279\u027b\u0007%\u0002\u0002\u027a\u0279\u0003\u0002",
    "\u0002\u0002\u027a\u027b\u0003\u0002\u0002\u0002\u027b\u027f\u0003\u0002",
    "\u0002\u0002\u027c\u027d\u0007\u000b\u0002\u0002\u027d\u027e\u0007\f",
    "\u0002\u0002\u027e\u0280\u0005B\"\u0002\u027f\u027c\u0003\u0002\u0002",
    "\u0002\u027f\u0280\u0003\u0002\u0002\u0002\u0280\u0283\u0003\u0002\u0002",
    "\u0002\u0281\u0282\u0007\r\u0002\u0002\u0282\u0284\u0005D#\u0002\u0283",
    "\u0281\u0003\u0002\u0002\u0002\u0283\u0284\u0003\u0002\u0002\u0002\u0284",
    "\u02bd\u0003\u0002\u0002\u0002\u0285\u0287\u0007C\u0002\u0002\u0286",
    "\u0288\u0007%\u0002\u0002\u0287\u0286\u0003\u0002\u0002\u0002\u0287",
    "\u0288\u0003\u0002\u0002\u0002\u0288\u028c\u0003\u0002\u0002\u0002\u0289",
    "\u028a\u0007\u000b\u0002\u0002\u028a\u028b\u0007\f\u0002\u0002\u028b",
    "\u028d\u0005B\"\u0002\u028c\u0289\u0003\u0002\u0002\u0002\u028c\u028d",
    "\u0003\u0002\u0002\u0002\u028d\u0290\u0003\u0002\u0002\u0002\u028e\u028f",
    "\u0007\r\u0002\u0002\u028f\u0291\u0005D#\u0002\u0290\u028e\u0003\u0002",
    "\u0002\u0002\u0290\u0291\u0003\u0002\u0002\u0002\u0291\u02bd\u0003\u0002",
    "\u0002\u0002\u0292\u0293\u0007D\u0002\u0002\u0293\u0299\u0007R\u0002",
    "\u0002\u0294\u0295\u0005@!\u0002\u0295\u0296\u0007P\u0002\u0002\u0296",
    "\u0298\u0003\u0002\u0002\u0002\u0297\u0294\u0003\u0002\u0002\u0002\u0298",
    "\u029b\u0003\u0002\u0002\u0002\u0299\u0297\u0003\u0002\u0002\u0002\u0299",
    "\u029a\u0003\u0002\u0002\u0002\u029a\u029c\u0003\u0002\u0002\u0002\u029b",
    "\u0299\u0003\u0002\u0002\u0002\u029c\u029d\u0005@!\u0002\u029d\u02a1",
    "\u0007S\u0002\u0002\u029e\u029f\u0007\u000b\u0002\u0002\u029f\u02a0",
    "\u0007\f\u0002\u0002\u02a0\u02a2\u0005B\"\u0002\u02a1\u029e\u0003\u0002",
    "\u0002\u0002\u02a1\u02a2\u0003\u0002\u0002\u0002\u02a2\u02a5\u0003\u0002",
    "\u0002\u0002\u02a3\u02a4\u0007\r\u0002\u0002\u02a4\u02a6\u0005D#\u0002",
    "\u02a5\u02a3\u0003\u0002\u0002\u0002\u02a5\u02a6\u0003\u0002\u0002\u0002",
    "\u02a6\u02bd\u0003\u0002\u0002\u0002\u02a7\u02a8\u0007\f\u0002\u0002",
    "\u02a8\u02ae\u0007R\u0002\u0002\u02a9\u02aa\u0005@!\u0002\u02aa\u02ab",
    "\u0007P\u0002\u0002\u02ab\u02ad\u0003\u0002\u0002\u0002\u02ac\u02a9",
    "\u0003\u0002\u0002\u0002\u02ad\u02b0\u0003\u0002\u0002\u0002\u02ae\u02ac",
    "\u0003\u0002\u0002\u0002\u02ae\u02af\u0003\u0002\u0002\u0002\u02af\u02b1",
    "\u0003\u0002\u0002\u0002\u02b0\u02ae\u0003\u0002\u0002\u0002\u02b1\u02b2",
    "\u0005@!\u0002\u02b2\u02b6\u0007S\u0002\u0002\u02b3\u02b4\u0007\u000b",
    "\u0002\u0002\u02b4\u02b5\u0007\f\u0002\u0002\u02b5\u02b7\u0005B\"\u0002",
    "\u02b6\u02b3\u0003\u0002\u0002\u0002\u02b6\u02b7\u0003\u0002\u0002\u0002",
    "\u02b7\u02ba\u0003\u0002\u0002\u0002\u02b8\u02b9\u0007\r\u0002\u0002",
    "\u02b9\u02bb\u0005D#\u0002\u02ba\u02b8\u0003\u0002\u0002\u0002\u02ba",
    "\u02bb\u0003\u0002\u0002\u0002\u02bb\u02bd\u0003\u0002\u0002\u0002\u02bc",
    "\u0195\u0003\u0002\u0002\u0002\u02bc\u019b\u0003\u0002\u0002\u0002\u02bc",
    "\u01a7\u0003\u0002\u0002\u0002\u02bc\u01b3\u0003\u0002\u0002\u0002\u02bc",
    "\u01bf\u0003\u0002\u0002\u0002\u02bc\u01cb\u0003\u0002\u0002\u0002\u02bc",
    "\u01d7\u0003\u0002\u0002\u0002\u02bc\u01e3\u0003\u0002\u0002\u0002\u02bc",
    "\u01f1\u0003\u0002\u0002\u0002\u02bc\u01ff\u0003\u0002\u0002\u0002\u02bc",
    "\u020d\u0003\u0002\u0002\u0002\u02bc\u021d\u0003\u0002\u0002\u0002\u02bc",
    "\u022d\u0003\u0002\u0002\u0002\u02bc\u022e\u0003\u0002\u0002\u0002\u02bc",
    "\u022f\u0003\u0002\u0002\u0002\u02bc\u0230\u0003\u0002\u0002\u0002\u02bc",
    "\u0231\u0003\u0002\u0002\u0002\u02bc\u0232\u0003\u0002\u0002\u0002\u02bc",
    "\u0233\u0003\u0002\u0002\u0002\u02bc\u0242\u0003\u0002\u0002\u0002\u02bc",
    "\u024f\u0003\u0002\u0002\u0002\u02bc\u0255\u0003\u0002\u0002\u0002\u02bc",
    "\u0259\u0003\u0002\u0002\u0002\u02bc\u025a\u0003\u0002\u0002\u0002\u02bc",
    "\u025b\u0003\u0002\u0002\u0002\u02bc\u025c\u0003\u0002\u0002\u0002\u02bc",
    "\u025d\u0003\u0002\u0002\u0002\u02bc\u025e\u0003\u0002\u0002\u0002\u02bc",
    "\u026b\u0003\u0002\u0002\u0002\u02bc\u0278\u0003\u0002\u0002\u0002\u02bc",
    "\u0285\u0003\u0002\u0002\u0002\u02bc\u0292\u0003\u0002\u0002\u0002\u02bc",
    "\u02a7\u0003\u0002\u0002\u0002\u02bd?\u0003\u0002\u0002\u0002\u02be",
    "\u02bf\u0007X\u0002\u0002\u02bfA\u0003\u0002\u0002\u0002\u02c0\u02c1",
    "\u0005N(\u0002\u02c1C\u0003\u0002\u0002\u0002\u02c2\u02c3\u0005N(\u0002",
    "\u02c3E\u0003\u0002\u0002\u0002\u02c4\u02cb\u0007\u0011\u0002\u0002",
    "\u02c5\u02cb\u0007\u0012\u0002\u0002\u02c6\u02c7\u0007\f\u0002\u0002",
    "\u02c7\u02cb\u0007\u001b\u0002\u0002\u02c8\u02c9\u0007E\u0002\u0002",
    "\u02c9\u02cb\u0007F\u0002\u0002\u02ca\u02c4\u0003\u0002\u0002\u0002",
    "\u02ca\u02c5\u0003\u0002\u0002\u0002\u02ca\u02c6\u0003\u0002\u0002\u0002",
    "\u02ca\u02c8\u0003\u0002\u0002\u0002\u02cbG\u0003\u0002\u0002\u0002",
    "\u02cc\u02cd\t\u0007\u0002\u0002\u02cdI\u0003\u0002\u0002\u0002\u02ce",
    "\u02d0\u0005L\'\u0002\u02cf\u02ce\u0003\u0002\u0002\u0002\u02d0\u02d3",
    "\u0003\u0002\u0002\u0002\u02d1\u02cf\u0003\u0002\u0002\u0002\u02d1\u02d2",
    "\u0003\u0002\u0002\u0002\u02d2K\u0003\u0002\u0002\u0002\u02d3\u02d1",
    "\u0003\u0002\u0002\u0002\u02d4\u02d5\u0007U\u0002\u0002\u02d5\u02d6",
    "\u0007K\u0002\u0002\u02d6\u02d9\u0007U\u0002\u0002\u02d7\u02d9\u0005",
    "\n\u0006\u0002\u02d8\u02d4\u0003\u0002\u0002\u0002\u02d8\u02d7\u0003",
    "\u0002\u0002\u0002\u02d9M\u0003\u0002\u0002\u0002\u02da\u02e3\u0007",
    "T\u0002\u0002\u02db\u02dc\u0007L\u0002\u0002\u02dc\u02dd\u0007U\u0002",
    "\u0002\u02dd\u02e3\u0007L\u0002\u0002\u02de\u02df\u0007M\u0002\u0002",
    "\u02df\u02e0\u0007U\u0002\u0002\u02e0\u02e3\u0007M\u0002\u0002\u02e1",
    "\u02e3\u0007U\u0002\u0002\u02e2\u02da\u0003\u0002\u0002\u0002\u02e2",
    "\u02db\u0003\u0002\u0002\u0002\u02e2\u02de\u0003\u0002\u0002\u0002\u02e2",
    "\u02e1\u0003\u0002\u0002\u0002\u02e3O\u0003\u0002\u0002\u0002sSiox~",
    "\u0082\u0087\u008b\u008f\u0095\u009f\u00a7\u00b0\u00b4\u00bd\u00c2\u00c9",
    "\u00cd\u00d3\u00d9\u00de\u00ea\u00f4\u00f6\u0100\u0108\u0110\u0118\u011a",
    "\u011e\u0121\u0129\u0131\u0133\u0138\u0140\u0147\u0152\u0156\u0159\u015d",
    "\u0160\u0163\u0167\u017c\u0184\u0189\u0193\u0199\u019f\u01a2\u01a5\u01ab",
    "\u01ae\u01b1\u01b7\u01ba\u01bd\u01c3\u01c6\u01c9\u01cf\u01d2\u01d5\u01db",
    "\u01de\u01e1\u01e9\u01ec\u01ef\u01f7\u01fa\u01fd\u0205\u0208\u020b\u0212",
    "\u0215\u0218\u021b\u0222\u0225\u0228\u022b\u0237\u023c\u0240\u0249\u024d",
    "\u0253\u0260\u0265\u0269\u026d\u0272\u0276\u027a\u027f\u0283\u0287\u028c",
    "\u0290\u0299\u02a1\u02a5\u02ae\u02b6\u02ba\u02bc\u02ca\u02d1\u02d8\u02e2"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     "'.'", "'='", "'''", "'\"'", "'`'", "'@'", "','", "';'", 
                     "'('", "')'" ];

var symbolicNames = [ null, "BOOL", "K_DROP", "K_DATABASE", "K_SCHEMA", 
                      "K_IF", "K_EXISTS", "K_NOT", "K_DEFAULT", "K_CHARACTER", 
                      "K_SET", "K_COLLATE", "K_USE", "K_TEMPORARY", "K_TABLE", 
                      "K_RESTRICT", "K_CASCADE", "K_CONSTRAINT", "K_PRIMARY", 
                      "K_KEY", "K_INDEX", "K_UNIQUE", "K_FOREIGN", "K_COMMENT", 
                      "K_AUTO_INCREMENT", "K_NULL", "K_REFERENCES", "K_ON", 
                      "K_DELETE", "K_UPDATE", "K_ASC", "K_DESC", "K_BIT", 
                      "K_TINYINT", "K_UNSIGNED", "K_BINARY", "K_ZEROFILL", 
                      "K_SMALLINT", "K_MEDIUMINT", "K_INT", "K_INTEGER", 
                      "K_BIGINT", "K_REAL", "K_DOUBLE", "K_FLOAT", "K_DECIMAL", 
                      "K_NUMERIC", "K_BOOL", "K_BOOLEAN", "K_DATE", "K_TIME", 
                      "K_TIMESTAMP", "K_DATETIME", "K_YEAR", "K_CHAR", "K_VARCHAR", 
                      "K_VARBINARY", "K_TINYBLOB", "K_BLOB", "K_MEDIUMBLOB", 
                      "K_LONGBLOB", "K_JSON", "K_TINYTEXT", "K_TEXT", "K_MEDIUMTEXT", 
                      "K_LONGTEXT", "K_ENUM", "K_NO", "K_ACTION", "K_CREATE", 
                      "K_FALSE", "K_TRUE", "DOT", "EQ", "SINGLE_QUOTE", 
                      "DOUBLE_QUOTE", "BACK_QUOTE", "AT", "COMMA", "SEMICOLON", 
                      "LPAR", "RPAR", "ID", "NAME", "INT", "FLOAT", "STRING", 
                      "COMMENT", "SINGLE_COMMENT", "WS" ];

var ruleNames =  [ "script", "stmt", "dropSchema", "createSchema", "createSpecification", 
                   "tableComment", "setStmt", "setOption", "setDefaultValue", 
                   "useStmt", "dropTable", "dropTableName", "createTable", 
                   "tableName", "fieldList", "createDefinition", "columnName", 
                   "constraintName", "constraintTable", "columnDefinition", 
                   "autoIncrement", "columnDefaultValue", "columnNull", 
                   "columnNotNull", "fieldComment", "referenceDefinition", 
                   "referenceDeleteOption", "referenceUpdateOption", "referenceTable", 
                   "indexColName", "dataType", "stringItem", "charsetName", 
                   "collateName", "referenceOption", "defaultValue", "tableOptions", 
                   "option", "idName" ];

function SQLParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

SQLParser.prototype = Object.create(antlr4.Parser.prototype);
SQLParser.prototype.constructor = SQLParser;

Object.defineProperty(SQLParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

SQLParser.EOF = antlr4.Token.EOF;
SQLParser.BOOL = 1;
SQLParser.K_DROP = 2;
SQLParser.K_DATABASE = 3;
SQLParser.K_SCHEMA = 4;
SQLParser.K_IF = 5;
SQLParser.K_EXISTS = 6;
SQLParser.K_NOT = 7;
SQLParser.K_DEFAULT = 8;
SQLParser.K_CHARACTER = 9;
SQLParser.K_SET = 10;
SQLParser.K_COLLATE = 11;
SQLParser.K_USE = 12;
SQLParser.K_TEMPORARY = 13;
SQLParser.K_TABLE = 14;
SQLParser.K_RESTRICT = 15;
SQLParser.K_CASCADE = 16;
SQLParser.K_CONSTRAINT = 17;
SQLParser.K_PRIMARY = 18;
SQLParser.K_KEY = 19;
SQLParser.K_INDEX = 20;
SQLParser.K_UNIQUE = 21;
SQLParser.K_FOREIGN = 22;
SQLParser.K_COMMENT = 23;
SQLParser.K_AUTO_INCREMENT = 24;
SQLParser.K_NULL = 25;
SQLParser.K_REFERENCES = 26;
SQLParser.K_ON = 27;
SQLParser.K_DELETE = 28;
SQLParser.K_UPDATE = 29;
SQLParser.K_ASC = 30;
SQLParser.K_DESC = 31;
SQLParser.K_BIT = 32;
SQLParser.K_TINYINT = 33;
SQLParser.K_UNSIGNED = 34;
SQLParser.K_BINARY = 35;
SQLParser.K_ZEROFILL = 36;
SQLParser.K_SMALLINT = 37;
SQLParser.K_MEDIUMINT = 38;
SQLParser.K_INT = 39;
SQLParser.K_INTEGER = 40;
SQLParser.K_BIGINT = 41;
SQLParser.K_REAL = 42;
SQLParser.K_DOUBLE = 43;
SQLParser.K_FLOAT = 44;
SQLParser.K_DECIMAL = 45;
SQLParser.K_NUMERIC = 46;
SQLParser.K_BOOL = 47;
SQLParser.K_BOOLEAN = 48;
SQLParser.K_DATE = 49;
SQLParser.K_TIME = 50;
SQLParser.K_TIMESTAMP = 51;
SQLParser.K_DATETIME = 52;
SQLParser.K_YEAR = 53;
SQLParser.K_CHAR = 54;
SQLParser.K_VARCHAR = 55;
SQLParser.K_VARBINARY = 56;
SQLParser.K_TINYBLOB = 57;
SQLParser.K_BLOB = 58;
SQLParser.K_MEDIUMBLOB = 59;
SQLParser.K_LONGBLOB = 60;
SQLParser.K_JSON = 61;
SQLParser.K_TINYTEXT = 62;
SQLParser.K_TEXT = 63;
SQLParser.K_MEDIUMTEXT = 64;
SQLParser.K_LONGTEXT = 65;
SQLParser.K_ENUM = 66;
SQLParser.K_NO = 67;
SQLParser.K_ACTION = 68;
SQLParser.K_CREATE = 69;
SQLParser.K_FALSE = 70;
SQLParser.K_TRUE = 71;
SQLParser.DOT = 72;
SQLParser.EQ = 73;
SQLParser.SINGLE_QUOTE = 74;
SQLParser.DOUBLE_QUOTE = 75;
SQLParser.BACK_QUOTE = 76;
SQLParser.AT = 77;
SQLParser.COMMA = 78;
SQLParser.SEMICOLON = 79;
SQLParser.LPAR = 80;
SQLParser.RPAR = 81;
SQLParser.ID = 82;
SQLParser.NAME = 83;
SQLParser.INT = 84;
SQLParser.FLOAT = 85;
SQLParser.STRING = 86;
SQLParser.COMMENT = 87;
SQLParser.SINGLE_COMMENT = 88;
SQLParser.WS = 89;

SQLParser.RULE_script = 0;
SQLParser.RULE_stmt = 1;
SQLParser.RULE_dropSchema = 2;
SQLParser.RULE_createSchema = 3;
SQLParser.RULE_createSpecification = 4;
SQLParser.RULE_tableComment = 5;
SQLParser.RULE_setStmt = 6;
SQLParser.RULE_setOption = 7;
SQLParser.RULE_setDefaultValue = 8;
SQLParser.RULE_useStmt = 9;
SQLParser.RULE_dropTable = 10;
SQLParser.RULE_dropTableName = 11;
SQLParser.RULE_createTable = 12;
SQLParser.RULE_tableName = 13;
SQLParser.RULE_fieldList = 14;
SQLParser.RULE_createDefinition = 15;
SQLParser.RULE_columnName = 16;
SQLParser.RULE_constraintName = 17;
SQLParser.RULE_constraintTable = 18;
SQLParser.RULE_columnDefinition = 19;
SQLParser.RULE_autoIncrement = 20;
SQLParser.RULE_columnDefaultValue = 21;
SQLParser.RULE_columnNull = 22;
SQLParser.RULE_columnNotNull = 23;
SQLParser.RULE_fieldComment = 24;
SQLParser.RULE_referenceDefinition = 25;
SQLParser.RULE_referenceDeleteOption = 26;
SQLParser.RULE_referenceUpdateOption = 27;
SQLParser.RULE_referenceTable = 28;
SQLParser.RULE_indexColName = 29;
SQLParser.RULE_dataType = 30;
SQLParser.RULE_stringItem = 31;
SQLParser.RULE_charsetName = 32;
SQLParser.RULE_collateName = 33;
SQLParser.RULE_referenceOption = 34;
SQLParser.RULE_defaultValue = 35;
SQLParser.RULE_tableOptions = 36;
SQLParser.RULE_option = 37;
SQLParser.RULE_idName = 38;


function ScriptContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_script;
    return this;
}

ScriptContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ScriptContext.prototype.constructor = ScriptContext;

ScriptContext.prototype.stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StmtContext);
    } else {
        return this.getTypedRuleContext(StmtContext,i);
    }
};

ScriptContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterScript(this);
	}
};

ScriptContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitScript(this);
	}
};




SQLParser.ScriptContext = ScriptContext;

SQLParser.prototype.script = function() {

    var localctx = new ScriptContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, SQLParser.RULE_script);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 81;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLParser.K_DROP) | (1 << SQLParser.K_SET) | (1 << SQLParser.K_USE))) !== 0) || _la===SQLParser.K_CREATE || _la===SQLParser.SEMICOLON) {
            this.state = 78;
            this.stmt();
            this.state = 83;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_stmt;
    return this;
}

StmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StmtContext.prototype.constructor = StmtContext;

StmtContext.prototype.createSchema = function() {
    return this.getTypedRuleContext(CreateSchemaContext,0);
};

StmtContext.prototype.SEMICOLON = function() {
    return this.getToken(SQLParser.SEMICOLON, 0);
};

StmtContext.prototype.dropSchema = function() {
    return this.getTypedRuleContext(DropSchemaContext,0);
};

StmtContext.prototype.createTable = function() {
    return this.getTypedRuleContext(CreateTableContext,0);
};

StmtContext.prototype.dropTable = function() {
    return this.getTypedRuleContext(DropTableContext,0);
};

StmtContext.prototype.useStmt = function() {
    return this.getTypedRuleContext(UseStmtContext,0);
};

StmtContext.prototype.setStmt = function() {
    return this.getTypedRuleContext(SetStmtContext,0);
};

StmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterStmt(this);
	}
};

StmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitStmt(this);
	}
};




SQLParser.StmtContext = StmtContext;

SQLParser.prototype.stmt = function() {

    var localctx = new StmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, SQLParser.RULE_stmt);
    try {
        this.state = 103;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 84;
            this.createSchema();
            this.state = 85;
            this.match(SQLParser.SEMICOLON);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 87;
            this.dropSchema();
            this.state = 88;
            this.match(SQLParser.SEMICOLON);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 90;
            this.createTable();
            this.state = 91;
            this.match(SQLParser.SEMICOLON);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 93;
            this.dropTable();
            this.state = 94;
            this.match(SQLParser.SEMICOLON);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 96;
            this.useStmt();
            this.state = 97;
            this.match(SQLParser.SEMICOLON);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 99;
            this.setStmt();
            this.state = 100;
            this.match(SQLParser.SEMICOLON);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 102;
            this.match(SQLParser.SEMICOLON);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropSchemaContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_dropSchema;
    return this;
}

DropSchemaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropSchemaContext.prototype.constructor = DropSchemaContext;

DropSchemaContext.prototype.K_DROP = function() {
    return this.getToken(SQLParser.K_DROP, 0);
};

DropSchemaContext.prototype.idName = function() {
    return this.getTypedRuleContext(IdNameContext,0);
};

DropSchemaContext.prototype.K_DATABASE = function() {
    return this.getToken(SQLParser.K_DATABASE, 0);
};

DropSchemaContext.prototype.K_SCHEMA = function() {
    return this.getToken(SQLParser.K_SCHEMA, 0);
};

DropSchemaContext.prototype.K_IF = function() {
    return this.getToken(SQLParser.K_IF, 0);
};

DropSchemaContext.prototype.K_EXISTS = function() {
    return this.getToken(SQLParser.K_EXISTS, 0);
};

DropSchemaContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterDropSchema(this);
	}
};

DropSchemaContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitDropSchema(this);
	}
};




SQLParser.DropSchemaContext = DropSchemaContext;

SQLParser.prototype.dropSchema = function() {

    var localctx = new DropSchemaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, SQLParser.RULE_dropSchema);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 105;
        this.match(SQLParser.K_DROP);
        this.state = 106;
        _la = this._input.LA(1);
        if(!(_la===SQLParser.K_DATABASE || _la===SQLParser.K_SCHEMA)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 109;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_IF) {
            this.state = 107;
            this.match(SQLParser.K_IF);
            this.state = 108;
            this.match(SQLParser.K_EXISTS);
        }

        this.state = 111;
        this.idName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateSchemaContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_createSchema;
    return this;
}

CreateSchemaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateSchemaContext.prototype.constructor = CreateSchemaContext;

CreateSchemaContext.prototype.K_CREATE = function() {
    return this.getToken(SQLParser.K_CREATE, 0);
};

CreateSchemaContext.prototype.idName = function() {
    return this.getTypedRuleContext(IdNameContext,0);
};

CreateSchemaContext.prototype.K_DATABASE = function() {
    return this.getToken(SQLParser.K_DATABASE, 0);
};

CreateSchemaContext.prototype.K_SCHEMA = function() {
    return this.getToken(SQLParser.K_SCHEMA, 0);
};

CreateSchemaContext.prototype.K_IF = function() {
    return this.getToken(SQLParser.K_IF, 0);
};

CreateSchemaContext.prototype.K_NOT = function() {
    return this.getToken(SQLParser.K_NOT, 0);
};

CreateSchemaContext.prototype.K_EXISTS = function() {
    return this.getToken(SQLParser.K_EXISTS, 0);
};

CreateSchemaContext.prototype.createSpecification = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CreateSpecificationContext);
    } else {
        return this.getTypedRuleContext(CreateSpecificationContext,i);
    }
};

CreateSchemaContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCreateSchema(this);
	}
};

CreateSchemaContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCreateSchema(this);
	}
};




SQLParser.CreateSchemaContext = CreateSchemaContext;

SQLParser.prototype.createSchema = function() {

    var localctx = new CreateSchemaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, SQLParser.RULE_createSchema);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 113;
        this.match(SQLParser.K_CREATE);
        this.state = 114;
        _la = this._input.LA(1);
        if(!(_la===SQLParser.K_DATABASE || _la===SQLParser.K_SCHEMA)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 118;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_IF) {
            this.state = 115;
            this.match(SQLParser.K_IF);
            this.state = 116;
            this.match(SQLParser.K_NOT);
            this.state = 117;
            this.match(SQLParser.K_EXISTS);
        }

        this.state = 120;
        this.idName();
        this.state = 124;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLParser.K_DEFAULT) | (1 << SQLParser.K_CHARACTER) | (1 << SQLParser.K_COLLATE) | (1 << SQLParser.K_COMMENT))) !== 0)) {
            this.state = 121;
            this.createSpecification();
            this.state = 126;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateSpecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_createSpecification;
    return this;
}

CreateSpecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateSpecificationContext.prototype.constructor = CreateSpecificationContext;

CreateSpecificationContext.prototype.K_CHARACTER = function() {
    return this.getToken(SQLParser.K_CHARACTER, 0);
};

CreateSpecificationContext.prototype.K_SET = function() {
    return this.getToken(SQLParser.K_SET, 0);
};

CreateSpecificationContext.prototype.charsetName = function() {
    return this.getTypedRuleContext(CharsetNameContext,0);
};

CreateSpecificationContext.prototype.K_DEFAULT = function() {
    return this.getToken(SQLParser.K_DEFAULT, 0);
};

CreateSpecificationContext.prototype.EQ = function() {
    return this.getToken(SQLParser.EQ, 0);
};

CreateSpecificationContext.prototype.K_COLLATE = function() {
    return this.getToken(SQLParser.K_COLLATE, 0);
};

CreateSpecificationContext.prototype.collateName = function() {
    return this.getTypedRuleContext(CollateNameContext,0);
};

CreateSpecificationContext.prototype.K_COMMENT = function() {
    return this.getToken(SQLParser.K_COMMENT, 0);
};

CreateSpecificationContext.prototype.tableComment = function() {
    return this.getTypedRuleContext(TableCommentContext,0);
};

CreateSpecificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCreateSpecification(this);
	}
};

CreateSpecificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCreateSpecification(this);
	}
};




SQLParser.CreateSpecificationContext = CreateSpecificationContext;

SQLParser.prototype.createSpecification = function() {

    var localctx = new CreateSpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, SQLParser.RULE_createSpecification);
    var _la = 0; // Token type
    try {
        this.state = 147;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 128;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_DEFAULT) {
                this.state = 127;
                this.match(SQLParser.K_DEFAULT);
            }

            this.state = 130;
            this.match(SQLParser.K_CHARACTER);
            this.state = 131;
            this.match(SQLParser.K_SET);
            this.state = 133;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.EQ) {
                this.state = 132;
                this.match(SQLParser.EQ);
            }

            this.state = 135;
            this.charsetName();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 137;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_DEFAULT) {
                this.state = 136;
                this.match(SQLParser.K_DEFAULT);
            }

            this.state = 139;
            this.match(SQLParser.K_COLLATE);
            this.state = 141;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.EQ) {
                this.state = 140;
                this.match(SQLParser.EQ);
            }

            this.state = 143;
            this.collateName();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 144;
            this.match(SQLParser.K_COMMENT);
            this.state = 145;
            this.match(SQLParser.EQ);
            this.state = 146;
            this.tableComment();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableCommentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_tableComment;
    return this;
}

TableCommentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableCommentContext.prototype.constructor = TableCommentContext;

TableCommentContext.prototype.STRING = function() {
    return this.getToken(SQLParser.STRING, 0);
};

TableCommentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTableComment(this);
	}
};

TableCommentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTableComment(this);
	}
};




SQLParser.TableCommentContext = TableCommentContext;

SQLParser.prototype.tableComment = function() {

    var localctx = new TableCommentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, SQLParser.RULE_tableComment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 149;
        this.match(SQLParser.STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_setStmt;
    return this;
}

SetStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetStmtContext.prototype.constructor = SetStmtContext;

SetStmtContext.prototype.K_SET = function() {
    return this.getToken(SQLParser.K_SET, 0);
};

SetStmtContext.prototype.setOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SetOptionContext);
    } else {
        return this.getTypedRuleContext(SetOptionContext,i);
    }
};

SetStmtContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


SetStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSetStmt(this);
	}
};

SetStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSetStmt(this);
	}
};




SQLParser.SetStmtContext = SetStmtContext;

SQLParser.prototype.setStmt = function() {

    var localctx = new SetStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, SQLParser.RULE_setStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 151;
        this.match(SQLParser.K_SET);
        this.state = 157;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,10,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 152;
                this.setOption();
                this.state = 153;
                this.match(SQLParser.COMMA); 
            }
            this.state = 159;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,10,this._ctx);
        }

        this.state = 160;
        this.setOption();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_setOption;
    return this;
}

SetOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetOptionContext.prototype.constructor = SetOptionContext;

SetOptionContext.prototype.NAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.NAME);
    } else {
        return this.getToken(SQLParser.NAME, i);
    }
};


SetOptionContext.prototype.EQ = function() {
    return this.getToken(SQLParser.EQ, 0);
};

SetOptionContext.prototype.setDefaultValue = function() {
    return this.getTypedRuleContext(SetDefaultValueContext,0);
};

SetOptionContext.prototype.AT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.AT);
    } else {
        return this.getToken(SQLParser.AT, i);
    }
};


SetOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSetOption(this);
	}
};

SetOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSetOption(this);
	}
};




SQLParser.SetOptionContext = SetOptionContext;

SQLParser.prototype.setOption = function() {

    var localctx = new SetOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, SQLParser.RULE_setOption);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 165;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.AT) {
            this.state = 162;
            this.match(SQLParser.AT);
            this.state = 167;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 168;
        this.match(SQLParser.NAME);
        this.state = 169;
        this.match(SQLParser.EQ);
        this.state = 178;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SQLParser.BOOL:
        case SQLParser.K_NULL:
        case SQLParser.INT:
        case SQLParser.FLOAT:
        case SQLParser.STRING:
            this.state = 170;
            this.setDefaultValue();
            break;
        case SQLParser.AT:
        case SQLParser.NAME:
            this.state = 174;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLParser.AT) {
                this.state = 171;
                this.match(SQLParser.AT);
                this.state = 176;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 177;
            this.match(SQLParser.NAME);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetDefaultValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_setDefaultValue;
    return this;
}

SetDefaultValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetDefaultValueContext.prototype.constructor = SetDefaultValueContext;

SetDefaultValueContext.prototype.defaultValue = function() {
    return this.getTypedRuleContext(DefaultValueContext,0);
};

SetDefaultValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterSetDefaultValue(this);
	}
};

SetDefaultValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitSetDefaultValue(this);
	}
};




SQLParser.SetDefaultValueContext = SetDefaultValueContext;

SQLParser.prototype.setDefaultValue = function() {

    var localctx = new SetDefaultValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, SQLParser.RULE_setDefaultValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 180;
        this.defaultValue();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UseStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_useStmt;
    return this;
}

UseStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UseStmtContext.prototype.constructor = UseStmtContext;

UseStmtContext.prototype.K_USE = function() {
    return this.getToken(SQLParser.K_USE, 0);
};

UseStmtContext.prototype.idName = function() {
    return this.getTypedRuleContext(IdNameContext,0);
};

UseStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterUseStmt(this);
	}
};

UseStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitUseStmt(this);
	}
};




SQLParser.UseStmtContext = UseStmtContext;

SQLParser.prototype.useStmt = function() {

    var localctx = new UseStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, SQLParser.RULE_useStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 182;
        this.match(SQLParser.K_USE);
        this.state = 183;
        this.idName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_dropTable;
    return this;
}

DropTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropTableContext.prototype.constructor = DropTableContext;

DropTableContext.prototype.K_DROP = function() {
    return this.getToken(SQLParser.K_DROP, 0);
};

DropTableContext.prototype.K_TABLE = function() {
    return this.getToken(SQLParser.K_TABLE, 0);
};

DropTableContext.prototype.dropTableName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DropTableNameContext);
    } else {
        return this.getTypedRuleContext(DropTableNameContext,i);
    }
};

DropTableContext.prototype.K_TEMPORARY = function() {
    return this.getToken(SQLParser.K_TEMPORARY, 0);
};

DropTableContext.prototype.K_IF = function() {
    return this.getToken(SQLParser.K_IF, 0);
};

DropTableContext.prototype.K_EXISTS = function() {
    return this.getToken(SQLParser.K_EXISTS, 0);
};

DropTableContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


DropTableContext.prototype.K_RESTRICT = function() {
    return this.getToken(SQLParser.K_RESTRICT, 0);
};

DropTableContext.prototype.K_CASCADE = function() {
    return this.getToken(SQLParser.K_CASCADE, 0);
};

DropTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterDropTable(this);
	}
};

DropTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitDropTable(this);
	}
};




SQLParser.DropTableContext = DropTableContext;

SQLParser.prototype.dropTable = function() {

    var localctx = new DropTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, SQLParser.RULE_dropTable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 185;
        this.match(SQLParser.K_DROP);
        this.state = 187;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_TEMPORARY) {
            this.state = 186;
            this.match(SQLParser.K_TEMPORARY);
        }

        this.state = 189;
        this.match(SQLParser.K_TABLE);
        this.state = 192;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_IF) {
            this.state = 190;
            this.match(SQLParser.K_IF);
            this.state = 191;
            this.match(SQLParser.K_EXISTS);
        }

        this.state = 194;
        this.dropTableName();
        this.state = 199;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 195;
            this.match(SQLParser.COMMA);
            this.state = 196;
            this.dropTableName();
            this.state = 201;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 203;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_RESTRICT || _la===SQLParser.K_CASCADE) {
            this.state = 202;
            _la = this._input.LA(1);
            if(!(_la===SQLParser.K_RESTRICT || _la===SQLParser.K_CASCADE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropTableNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_dropTableName;
    return this;
}

DropTableNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropTableNameContext.prototype.constructor = DropTableNameContext;

DropTableNameContext.prototype.idName = function() {
    return this.getTypedRuleContext(IdNameContext,0);
};

DropTableNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterDropTableName(this);
	}
};

DropTableNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitDropTableName(this);
	}
};




SQLParser.DropTableNameContext = DropTableNameContext;

SQLParser.prototype.dropTableName = function() {

    var localctx = new DropTableNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, SQLParser.RULE_dropTableName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 205;
        this.idName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_createTable;
    return this;
}

CreateTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateTableContext.prototype.constructor = CreateTableContext;

CreateTableContext.prototype.K_CREATE = function() {
    return this.getToken(SQLParser.K_CREATE, 0);
};

CreateTableContext.prototype.K_TABLE = function() {
    return this.getToken(SQLParser.K_TABLE, 0);
};

CreateTableContext.prototype.tableName = function() {
    return this.getTypedRuleContext(TableNameContext,0);
};

CreateTableContext.prototype.LPAR = function() {
    return this.getToken(SQLParser.LPAR, 0);
};

CreateTableContext.prototype.RPAR = function() {
    return this.getToken(SQLParser.RPAR, 0);
};

CreateTableContext.prototype.tableOptions = function() {
    return this.getTypedRuleContext(TableOptionsContext,0);
};

CreateTableContext.prototype.K_TEMPORARY = function() {
    return this.getToken(SQLParser.K_TEMPORARY, 0);
};

CreateTableContext.prototype.K_IF = function() {
    return this.getToken(SQLParser.K_IF, 0);
};

CreateTableContext.prototype.K_NOT = function() {
    return this.getToken(SQLParser.K_NOT, 0);
};

CreateTableContext.prototype.K_EXISTS = function() {
    return this.getToken(SQLParser.K_EXISTS, 0);
};

CreateTableContext.prototype.fieldList = function() {
    return this.getTypedRuleContext(FieldListContext,0);
};

CreateTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCreateTable(this);
	}
};

CreateTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCreateTable(this);
	}
};




SQLParser.CreateTableContext = CreateTableContext;

SQLParser.prototype.createTable = function() {

    var localctx = new CreateTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, SQLParser.RULE_createTable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 207;
        this.match(SQLParser.K_CREATE);
        this.state = 209;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_TEMPORARY) {
            this.state = 208;
            this.match(SQLParser.K_TEMPORARY);
        }

        this.state = 211;
        this.match(SQLParser.K_TABLE);
        this.state = 215;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_IF) {
            this.state = 212;
            this.match(SQLParser.K_IF);
            this.state = 213;
            this.match(SQLParser.K_NOT);
            this.state = 214;
            this.match(SQLParser.K_EXISTS);
        }

        this.state = 217;
        this.tableName();
        this.state = 218;
        this.match(SQLParser.LPAR);
        this.state = 220;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLParser.K_CONSTRAINT) | (1 << SQLParser.K_PRIMARY) | (1 << SQLParser.K_KEY) | (1 << SQLParser.K_INDEX) | (1 << SQLParser.K_UNIQUE) | (1 << SQLParser.K_FOREIGN))) !== 0) || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (SQLParser.SINGLE_QUOTE - 74)) | (1 << (SQLParser.DOUBLE_QUOTE - 74)) | (1 << (SQLParser.ID - 74)) | (1 << (SQLParser.NAME - 74)))) !== 0)) {
            this.state = 219;
            this.fieldList();
        }

        this.state = 222;
        this.match(SQLParser.RPAR);
        this.state = 223;
        this.tableOptions();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_tableName;
    return this;
}

TableNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableNameContext.prototype.constructor = TableNameContext;

TableNameContext.prototype.idName = function() {
    return this.getTypedRuleContext(IdNameContext,0);
};

TableNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTableName(this);
	}
};

TableNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTableName(this);
	}
};




SQLParser.TableNameContext = TableNameContext;

SQLParser.prototype.tableName = function() {

    var localctx = new TableNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, SQLParser.RULE_tableName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 225;
        this.idName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FieldListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_fieldList;
    return this;
}

FieldListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldListContext.prototype.constructor = FieldListContext;

FieldListContext.prototype.createDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CreateDefinitionContext);
    } else {
        return this.getTypedRuleContext(CreateDefinitionContext,i);
    }
};

FieldListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


FieldListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterFieldList(this);
	}
};

FieldListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitFieldList(this);
	}
};




SQLParser.FieldListContext = FieldListContext;

SQLParser.prototype.fieldList = function() {

    var localctx = new FieldListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, SQLParser.RULE_fieldList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 232;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 227;
                this.createDefinition();
                this.state = 228;
                this.match(SQLParser.COMMA); 
            }
            this.state = 234;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
        }

        this.state = 235;
        this.createDefinition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_createDefinition;
    return this;
}

CreateDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateDefinitionContext.prototype.constructor = CreateDefinitionContext;


 
CreateDefinitionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ForeignStmtContext(parser, ctx) {
	CreateDefinitionContext.call(this, parser);
    CreateDefinitionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ForeignStmtContext.prototype = Object.create(CreateDefinitionContext.prototype);
ForeignStmtContext.prototype.constructor = ForeignStmtContext;

SQLParser.ForeignStmtContext = ForeignStmtContext;

ForeignStmtContext.prototype.K_FOREIGN = function() {
    return this.getToken(SQLParser.K_FOREIGN, 0);
};

ForeignStmtContext.prototype.K_KEY = function() {
    return this.getToken(SQLParser.K_KEY, 0);
};

ForeignStmtContext.prototype.LPAR = function() {
    return this.getToken(SQLParser.LPAR, 0);
};

ForeignStmtContext.prototype.indexColName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndexColNameContext);
    } else {
        return this.getTypedRuleContext(IndexColNameContext,i);
    }
};

ForeignStmtContext.prototype.RPAR = function() {
    return this.getToken(SQLParser.RPAR, 0);
};

ForeignStmtContext.prototype.referenceDefinition = function() {
    return this.getTypedRuleContext(ReferenceDefinitionContext,0);
};

ForeignStmtContext.prototype.K_CONSTRAINT = function() {
    return this.getToken(SQLParser.K_CONSTRAINT, 0);
};

ForeignStmtContext.prototype.constraintTable = function() {
    return this.getTypedRuleContext(ConstraintTableContext,0);
};

ForeignStmtContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


ForeignStmtContext.prototype.constraintName = function() {
    return this.getTypedRuleContext(ConstraintNameContext,0);
};
ForeignStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterForeignStmt(this);
	}
};

ForeignStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitForeignStmt(this);
	}
};


function PrimaryKeyStmtContext(parser, ctx) {
	CreateDefinitionContext.call(this, parser);
    CreateDefinitionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PrimaryKeyStmtContext.prototype = Object.create(CreateDefinitionContext.prototype);
PrimaryKeyStmtContext.prototype.constructor = PrimaryKeyStmtContext;

SQLParser.PrimaryKeyStmtContext = PrimaryKeyStmtContext;

PrimaryKeyStmtContext.prototype.K_PRIMARY = function() {
    return this.getToken(SQLParser.K_PRIMARY, 0);
};

PrimaryKeyStmtContext.prototype.K_KEY = function() {
    return this.getToken(SQLParser.K_KEY, 0);
};

PrimaryKeyStmtContext.prototype.LPAR = function() {
    return this.getToken(SQLParser.LPAR, 0);
};

PrimaryKeyStmtContext.prototype.indexColName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndexColNameContext);
    } else {
        return this.getTypedRuleContext(IndexColNameContext,i);
    }
};

PrimaryKeyStmtContext.prototype.RPAR = function() {
    return this.getToken(SQLParser.RPAR, 0);
};

PrimaryKeyStmtContext.prototype.K_CONSTRAINT = function() {
    return this.getToken(SQLParser.K_CONSTRAINT, 0);
};

PrimaryKeyStmtContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


PrimaryKeyStmtContext.prototype.constraintName = function() {
    return this.getTypedRuleContext(ConstraintNameContext,0);
};
PrimaryKeyStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterPrimaryKeyStmt(this);
	}
};

PrimaryKeyStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitPrimaryKeyStmt(this);
	}
};


function IndexStmtContext(parser, ctx) {
	CreateDefinitionContext.call(this, parser);
    CreateDefinitionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IndexStmtContext.prototype = Object.create(CreateDefinitionContext.prototype);
IndexStmtContext.prototype.constructor = IndexStmtContext;

SQLParser.IndexStmtContext = IndexStmtContext;

IndexStmtContext.prototype.LPAR = function() {
    return this.getToken(SQLParser.LPAR, 0);
};

IndexStmtContext.prototype.indexColName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndexColNameContext);
    } else {
        return this.getTypedRuleContext(IndexColNameContext,i);
    }
};

IndexStmtContext.prototype.RPAR = function() {
    return this.getToken(SQLParser.RPAR, 0);
};

IndexStmtContext.prototype.K_INDEX = function() {
    return this.getToken(SQLParser.K_INDEX, 0);
};

IndexStmtContext.prototype.K_KEY = function() {
    return this.getToken(SQLParser.K_KEY, 0);
};

IndexStmtContext.prototype.constraintName = function() {
    return this.getTypedRuleContext(ConstraintNameContext,0);
};

IndexStmtContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};

IndexStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterIndexStmt(this);
	}
};

IndexStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitIndexStmt(this);
	}
};


function UniqueStmtContext(parser, ctx) {
	CreateDefinitionContext.call(this, parser);
    CreateDefinitionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UniqueStmtContext.prototype = Object.create(CreateDefinitionContext.prototype);
UniqueStmtContext.prototype.constructor = UniqueStmtContext;

SQLParser.UniqueStmtContext = UniqueStmtContext;

UniqueStmtContext.prototype.K_UNIQUE = function() {
    return this.getToken(SQLParser.K_UNIQUE, 0);
};

UniqueStmtContext.prototype.LPAR = function() {
    return this.getToken(SQLParser.LPAR, 0);
};

UniqueStmtContext.prototype.indexColName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndexColNameContext);
    } else {
        return this.getTypedRuleContext(IndexColNameContext,i);
    }
};

UniqueStmtContext.prototype.RPAR = function() {
    return this.getToken(SQLParser.RPAR, 0);
};

UniqueStmtContext.prototype.K_CONSTRAINT = function() {
    return this.getToken(SQLParser.K_CONSTRAINT, 0);
};

UniqueStmtContext.prototype.constraintTable = function() {
    return this.getTypedRuleContext(ConstraintTableContext,0);
};

UniqueStmtContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


UniqueStmtContext.prototype.K_INDEX = function() {
    return this.getToken(SQLParser.K_INDEX, 0);
};

UniqueStmtContext.prototype.K_KEY = function() {
    return this.getToken(SQLParser.K_KEY, 0);
};

UniqueStmtContext.prototype.constraintName = function() {
    return this.getTypedRuleContext(ConstraintNameContext,0);
};
UniqueStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterUniqueStmt(this);
	}
};

UniqueStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitUniqueStmt(this);
	}
};


function FieldStmtContext(parser, ctx) {
	CreateDefinitionContext.call(this, parser);
    CreateDefinitionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldStmtContext.prototype = Object.create(CreateDefinitionContext.prototype);
FieldStmtContext.prototype.constructor = FieldStmtContext;

SQLParser.FieldStmtContext = FieldStmtContext;

FieldStmtContext.prototype.columnName = function() {
    return this.getTypedRuleContext(ColumnNameContext,0);
};

FieldStmtContext.prototype.columnDefinition = function() {
    return this.getTypedRuleContext(ColumnDefinitionContext,0);
};
FieldStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterFieldStmt(this);
	}
};

FieldStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitFieldStmt(this);
	}
};



SQLParser.CreateDefinitionContext = CreateDefinitionContext;

SQLParser.prototype.createDefinition = function() {

    var localctx = new CreateDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, SQLParser.RULE_createDefinition);
    var _la = 0; // Token type
    try {
        this.state = 325;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
        switch(la_) {
        case 1:
            localctx = new FieldStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 237;
            this.columnName();
            this.state = 238;
            this.columnDefinition();
            break;

        case 2:
            localctx = new PrimaryKeyStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 244;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_CONSTRAINT) {
                this.state = 240;
                this.match(SQLParser.K_CONSTRAINT);
                this.state = 242;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (SQLParser.SINGLE_QUOTE - 74)) | (1 << (SQLParser.DOUBLE_QUOTE - 74)) | (1 << (SQLParser.ID - 74)) | (1 << (SQLParser.NAME - 74)))) !== 0)) {
                    this.state = 241;
                    this.constraintName();
                }

            }

            this.state = 246;
            this.match(SQLParser.K_PRIMARY);
            this.state = 247;
            this.match(SQLParser.K_KEY);
            this.state = 248;
            this.match(SQLParser.LPAR);
            this.state = 254;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,24,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 249;
                    this.indexColName();
                    this.state = 250;
                    this.match(SQLParser.COMMA); 
                }
                this.state = 256;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,24,this._ctx);
            }

            this.state = 257;
            this.indexColName();
            this.state = 258;
            this.match(SQLParser.RPAR);
            break;

        case 3:
            localctx = new IndexStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 260;
            _la = this._input.LA(1);
            if(!(_la===SQLParser.K_KEY || _la===SQLParser.K_INDEX)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 262;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (SQLParser.SINGLE_QUOTE - 74)) | (1 << (SQLParser.DOUBLE_QUOTE - 74)) | (1 << (SQLParser.ID - 74)) | (1 << (SQLParser.NAME - 74)))) !== 0)) {
                this.state = 261;
                this.constraintName();
            }

            this.state = 264;
            this.match(SQLParser.LPAR);
            this.state = 270;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,26,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 265;
                    this.indexColName();
                    this.state = 266;
                    this.match(SQLParser.COMMA); 
                }
                this.state = 272;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,26,this._ctx);
            }

            this.state = 273;
            this.indexColName();
            this.state = 274;
            this.match(SQLParser.RPAR);
            break;

        case 4:
            localctx = new UniqueStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 280;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_CONSTRAINT) {
                this.state = 276;
                this.match(SQLParser.K_CONSTRAINT);
                this.state = 278;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (SQLParser.SINGLE_QUOTE - 74)) | (1 << (SQLParser.DOUBLE_QUOTE - 74)) | (1 << (SQLParser.ID - 74)) | (1 << (SQLParser.NAME - 74)))) !== 0)) {
                    this.state = 277;
                    this.constraintName();
                }

            }

            this.state = 282;
            this.match(SQLParser.K_UNIQUE);
            this.state = 284;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_KEY || _la===SQLParser.K_INDEX) {
                this.state = 283;
                _la = this._input.LA(1);
                if(!(_la===SQLParser.K_KEY || _la===SQLParser.K_INDEX)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 287;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (SQLParser.SINGLE_QUOTE - 74)) | (1 << (SQLParser.DOUBLE_QUOTE - 74)) | (1 << (SQLParser.ID - 74)) | (1 << (SQLParser.NAME - 74)))) !== 0)) {
                this.state = 286;
                this.constraintTable();
            }

            this.state = 289;
            this.match(SQLParser.LPAR);
            this.state = 295;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,31,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 290;
                    this.indexColName();
                    this.state = 291;
                    this.match(SQLParser.COMMA); 
                }
                this.state = 297;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,31,this._ctx);
            }

            this.state = 298;
            this.indexColName();
            this.state = 299;
            this.match(SQLParser.RPAR);
            break;

        case 5:
            localctx = new ForeignStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 305;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_CONSTRAINT) {
                this.state = 301;
                this.match(SQLParser.K_CONSTRAINT);
                this.state = 303;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (SQLParser.SINGLE_QUOTE - 74)) | (1 << (SQLParser.DOUBLE_QUOTE - 74)) | (1 << (SQLParser.ID - 74)) | (1 << (SQLParser.NAME - 74)))) !== 0)) {
                    this.state = 302;
                    this.constraintName();
                }

            }

            this.state = 307;
            this.match(SQLParser.K_FOREIGN);
            this.state = 308;
            this.match(SQLParser.K_KEY);
            this.state = 310;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (SQLParser.SINGLE_QUOTE - 74)) | (1 << (SQLParser.DOUBLE_QUOTE - 74)) | (1 << (SQLParser.ID - 74)) | (1 << (SQLParser.NAME - 74)))) !== 0)) {
                this.state = 309;
                this.constraintTable();
            }

            this.state = 312;
            this.match(SQLParser.LPAR);
            this.state = 318;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,35,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 313;
                    this.indexColName();
                    this.state = 314;
                    this.match(SQLParser.COMMA); 
                }
                this.state = 320;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,35,this._ctx);
            }

            this.state = 321;
            this.indexColName();
            this.state = 322;
            this.match(SQLParser.RPAR);
            this.state = 323;
            this.referenceDefinition();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_columnName;
    return this;
}

ColumnNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnNameContext.prototype.constructor = ColumnNameContext;

ColumnNameContext.prototype.idName = function() {
    return this.getTypedRuleContext(IdNameContext,0);
};

ColumnNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterColumnName(this);
	}
};

ColumnNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitColumnName(this);
	}
};




SQLParser.ColumnNameContext = ColumnNameContext;

SQLParser.prototype.columnName = function() {

    var localctx = new ColumnNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, SQLParser.RULE_columnName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 327;
        this.idName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstraintNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_constraintName;
    return this;
}

ConstraintNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstraintNameContext.prototype.constructor = ConstraintNameContext;

ConstraintNameContext.prototype.idName = function() {
    return this.getTypedRuleContext(IdNameContext,0);
};

ConstraintNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterConstraintName(this);
	}
};

ConstraintNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitConstraintName(this);
	}
};




SQLParser.ConstraintNameContext = ConstraintNameContext;

SQLParser.prototype.constraintName = function() {

    var localctx = new ConstraintNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, SQLParser.RULE_constraintName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 329;
        this.idName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstraintTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_constraintTable;
    return this;
}

ConstraintTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstraintTableContext.prototype.constructor = ConstraintTableContext;

ConstraintTableContext.prototype.idName = function() {
    return this.getTypedRuleContext(IdNameContext,0);
};

ConstraintTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterConstraintTable(this);
	}
};

ConstraintTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitConstraintTable(this);
	}
};




SQLParser.ConstraintTableContext = ConstraintTableContext;

SQLParser.prototype.constraintTable = function() {

    var localctx = new ConstraintTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, SQLParser.RULE_constraintTable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 331;
        this.idName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_columnDefinition;
    return this;
}

ColumnDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnDefinitionContext.prototype.constructor = ColumnDefinitionContext;

ColumnDefinitionContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

ColumnDefinitionContext.prototype.columnNull = function() {
    return this.getTypedRuleContext(ColumnNullContext,0);
};

ColumnDefinitionContext.prototype.columnNotNull = function() {
    return this.getTypedRuleContext(ColumnNotNullContext,0);
};

ColumnDefinitionContext.prototype.K_DEFAULT = function() {
    return this.getToken(SQLParser.K_DEFAULT, 0);
};

ColumnDefinitionContext.prototype.columnDefaultValue = function() {
    return this.getTypedRuleContext(ColumnDefaultValueContext,0);
};

ColumnDefinitionContext.prototype.autoIncrement = function() {
    return this.getTypedRuleContext(AutoIncrementContext,0);
};

ColumnDefinitionContext.prototype.K_COMMENT = function() {
    return this.getToken(SQLParser.K_COMMENT, 0);
};

ColumnDefinitionContext.prototype.fieldComment = function() {
    return this.getTypedRuleContext(FieldCommentContext,0);
};

ColumnDefinitionContext.prototype.K_UNIQUE = function() {
    return this.getToken(SQLParser.K_UNIQUE, 0);
};

ColumnDefinitionContext.prototype.K_KEY = function() {
    return this.getToken(SQLParser.K_KEY, 0);
};

ColumnDefinitionContext.prototype.K_PRIMARY = function() {
    return this.getToken(SQLParser.K_PRIMARY, 0);
};

ColumnDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterColumnDefinition(this);
	}
};

ColumnDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitColumnDefinition(this);
	}
};




SQLParser.ColumnDefinitionContext = ColumnDefinitionContext;

SQLParser.prototype.columnDefinition = function() {

    var localctx = new ColumnDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, SQLParser.RULE_columnDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 333;
        this.dataType();
        this.state = 336;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case SQLParser.K_NULL:
        	this.state = 334;
        	this.columnNull();
        	break;
        case SQLParser.K_NOT:
        	this.state = 335;
        	this.columnNotNull();
        	break;
        case SQLParser.K_DEFAULT:
        case SQLParser.K_PRIMARY:
        case SQLParser.K_KEY:
        case SQLParser.K_UNIQUE:
        case SQLParser.K_COMMENT:
        case SQLParser.K_AUTO_INCREMENT:
        case SQLParser.COMMA:
        case SQLParser.RPAR:
        	break;
        default:
        	break;
        }
        this.state = 340;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_DEFAULT) {
            this.state = 338;
            this.match(SQLParser.K_DEFAULT);
            this.state = 339;
            this.columnDefaultValue();
        }

        this.state = 343;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_AUTO_INCREMENT) {
            this.state = 342;
            this.autoIncrement();
        }

        this.state = 353;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case SQLParser.K_UNIQUE:
        	this.state = 345;
        	this.match(SQLParser.K_UNIQUE);
        	this.state = 347;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	if(_la===SQLParser.K_KEY) {
        	    this.state = 346;
        	    this.match(SQLParser.K_KEY);
        	}

        	break;
        case SQLParser.K_PRIMARY:
        case SQLParser.K_KEY:
        	this.state = 350;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	if(_la===SQLParser.K_PRIMARY) {
        	    this.state = 349;
        	    this.match(SQLParser.K_PRIMARY);
        	}

        	this.state = 352;
        	this.match(SQLParser.K_KEY);
        	break;
        case SQLParser.K_COMMENT:
        case SQLParser.COMMA:
        case SQLParser.RPAR:
        	break;
        default:
        	break;
        }
        this.state = 357;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_COMMENT) {
            this.state = 355;
            this.match(SQLParser.K_COMMENT);
            this.state = 356;
            this.fieldComment();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AutoIncrementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_autoIncrement;
    return this;
}

AutoIncrementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AutoIncrementContext.prototype.constructor = AutoIncrementContext;

AutoIncrementContext.prototype.K_AUTO_INCREMENT = function() {
    return this.getToken(SQLParser.K_AUTO_INCREMENT, 0);
};

AutoIncrementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterAutoIncrement(this);
	}
};

AutoIncrementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitAutoIncrement(this);
	}
};




SQLParser.AutoIncrementContext = AutoIncrementContext;

SQLParser.prototype.autoIncrement = function() {

    var localctx = new AutoIncrementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, SQLParser.RULE_autoIncrement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 359;
        this.match(SQLParser.K_AUTO_INCREMENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnDefaultValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_columnDefaultValue;
    return this;
}

ColumnDefaultValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnDefaultValueContext.prototype.constructor = ColumnDefaultValueContext;

ColumnDefaultValueContext.prototype.defaultValue = function() {
    return this.getTypedRuleContext(DefaultValueContext,0);
};

ColumnDefaultValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterColumnDefaultValue(this);
	}
};

ColumnDefaultValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitColumnDefaultValue(this);
	}
};




SQLParser.ColumnDefaultValueContext = ColumnDefaultValueContext;

SQLParser.prototype.columnDefaultValue = function() {

    var localctx = new ColumnDefaultValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, SQLParser.RULE_columnDefaultValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 361;
        this.defaultValue();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnNullContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_columnNull;
    return this;
}

ColumnNullContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnNullContext.prototype.constructor = ColumnNullContext;

ColumnNullContext.prototype.K_NULL = function() {
    return this.getToken(SQLParser.K_NULL, 0);
};

ColumnNullContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterColumnNull(this);
	}
};

ColumnNullContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitColumnNull(this);
	}
};




SQLParser.ColumnNullContext = ColumnNullContext;

SQLParser.prototype.columnNull = function() {

    var localctx = new ColumnNullContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, SQLParser.RULE_columnNull);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 363;
        this.match(SQLParser.K_NULL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnNotNullContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_columnNotNull;
    return this;
}

ColumnNotNullContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnNotNullContext.prototype.constructor = ColumnNotNullContext;

ColumnNotNullContext.prototype.K_NOT = function() {
    return this.getToken(SQLParser.K_NOT, 0);
};

ColumnNotNullContext.prototype.K_NULL = function() {
    return this.getToken(SQLParser.K_NULL, 0);
};

ColumnNotNullContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterColumnNotNull(this);
	}
};

ColumnNotNullContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitColumnNotNull(this);
	}
};




SQLParser.ColumnNotNullContext = ColumnNotNullContext;

SQLParser.prototype.columnNotNull = function() {

    var localctx = new ColumnNotNullContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, SQLParser.RULE_columnNotNull);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 365;
        this.match(SQLParser.K_NOT);
        this.state = 366;
        this.match(SQLParser.K_NULL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FieldCommentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_fieldComment;
    return this;
}

FieldCommentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldCommentContext.prototype.constructor = FieldCommentContext;

FieldCommentContext.prototype.STRING = function() {
    return this.getToken(SQLParser.STRING, 0);
};

FieldCommentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterFieldComment(this);
	}
};

FieldCommentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitFieldComment(this);
	}
};




SQLParser.FieldCommentContext = FieldCommentContext;

SQLParser.prototype.fieldComment = function() {

    var localctx = new FieldCommentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, SQLParser.RULE_fieldComment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 368;
        this.match(SQLParser.STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReferenceDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_referenceDefinition;
    return this;
}

ReferenceDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReferenceDefinitionContext.prototype.constructor = ReferenceDefinitionContext;

ReferenceDefinitionContext.prototype.K_REFERENCES = function() {
    return this.getToken(SQLParser.K_REFERENCES, 0);
};

ReferenceDefinitionContext.prototype.referenceTable = function() {
    return this.getTypedRuleContext(ReferenceTableContext,0);
};

ReferenceDefinitionContext.prototype.LPAR = function() {
    return this.getToken(SQLParser.LPAR, 0);
};

ReferenceDefinitionContext.prototype.indexColName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndexColNameContext);
    } else {
        return this.getTypedRuleContext(IndexColNameContext,i);
    }
};

ReferenceDefinitionContext.prototype.RPAR = function() {
    return this.getToken(SQLParser.RPAR, 0);
};

ReferenceDefinitionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


ReferenceDefinitionContext.prototype.K_ON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.K_ON);
    } else {
        return this.getToken(SQLParser.K_ON, i);
    }
};


ReferenceDefinitionContext.prototype.K_DELETE = function() {
    return this.getToken(SQLParser.K_DELETE, 0);
};

ReferenceDefinitionContext.prototype.referenceDeleteOption = function() {
    return this.getTypedRuleContext(ReferenceDeleteOptionContext,0);
};

ReferenceDefinitionContext.prototype.K_UPDATE = function() {
    return this.getToken(SQLParser.K_UPDATE, 0);
};

ReferenceDefinitionContext.prototype.referenceUpdateOption = function() {
    return this.getTypedRuleContext(ReferenceUpdateOptionContext,0);
};

ReferenceDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterReferenceDefinition(this);
	}
};

ReferenceDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitReferenceDefinition(this);
	}
};




SQLParser.ReferenceDefinitionContext = ReferenceDefinitionContext;

SQLParser.prototype.referenceDefinition = function() {

    var localctx = new ReferenceDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, SQLParser.RULE_referenceDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 370;
        this.match(SQLParser.K_REFERENCES);
        this.state = 371;
        this.referenceTable();
        this.state = 372;
        this.match(SQLParser.LPAR);
        this.state = 378;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,44,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 373;
                this.indexColName();
                this.state = 374;
                this.match(SQLParser.COMMA); 
            }
            this.state = 380;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,44,this._ctx);
        }

        this.state = 381;
        this.indexColName();
        this.state = 382;
        this.match(SQLParser.RPAR);
        this.state = 386;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
        if(la_===1) {
            this.state = 383;
            this.match(SQLParser.K_ON);
            this.state = 384;
            this.match(SQLParser.K_DELETE);
            this.state = 385;
            this.referenceDeleteOption();

        }
        this.state = 391;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_ON) {
            this.state = 388;
            this.match(SQLParser.K_ON);
            this.state = 389;
            this.match(SQLParser.K_UPDATE);
            this.state = 390;
            this.referenceUpdateOption();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReferenceDeleteOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_referenceDeleteOption;
    return this;
}

ReferenceDeleteOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReferenceDeleteOptionContext.prototype.constructor = ReferenceDeleteOptionContext;

ReferenceDeleteOptionContext.prototype.referenceOption = function() {
    return this.getTypedRuleContext(ReferenceOptionContext,0);
};

ReferenceDeleteOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterReferenceDeleteOption(this);
	}
};

ReferenceDeleteOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitReferenceDeleteOption(this);
	}
};




SQLParser.ReferenceDeleteOptionContext = ReferenceDeleteOptionContext;

SQLParser.prototype.referenceDeleteOption = function() {

    var localctx = new ReferenceDeleteOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, SQLParser.RULE_referenceDeleteOption);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 393;
        this.referenceOption();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReferenceUpdateOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_referenceUpdateOption;
    return this;
}

ReferenceUpdateOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReferenceUpdateOptionContext.prototype.constructor = ReferenceUpdateOptionContext;

ReferenceUpdateOptionContext.prototype.referenceOption = function() {
    return this.getTypedRuleContext(ReferenceOptionContext,0);
};

ReferenceUpdateOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterReferenceUpdateOption(this);
	}
};

ReferenceUpdateOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitReferenceUpdateOption(this);
	}
};




SQLParser.ReferenceUpdateOptionContext = ReferenceUpdateOptionContext;

SQLParser.prototype.referenceUpdateOption = function() {

    var localctx = new ReferenceUpdateOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, SQLParser.RULE_referenceUpdateOption);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 395;
        this.referenceOption();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReferenceTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_referenceTable;
    return this;
}

ReferenceTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReferenceTableContext.prototype.constructor = ReferenceTableContext;

ReferenceTableContext.prototype.idName = function() {
    return this.getTypedRuleContext(IdNameContext,0);
};

ReferenceTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterReferenceTable(this);
	}
};

ReferenceTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitReferenceTable(this);
	}
};




SQLParser.ReferenceTableContext = ReferenceTableContext;

SQLParser.prototype.referenceTable = function() {

    var localctx = new ReferenceTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, SQLParser.RULE_referenceTable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 397;
        this.idName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IndexColNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_indexColName;
    this.Type = null; // Token
    return this;
}

IndexColNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexColNameContext.prototype.constructor = IndexColNameContext;

IndexColNameContext.prototype.idName = function() {
    return this.getTypedRuleContext(IdNameContext,0);
};

IndexColNameContext.prototype.K_ASC = function() {
    return this.getToken(SQLParser.K_ASC, 0);
};

IndexColNameContext.prototype.K_DESC = function() {
    return this.getToken(SQLParser.K_DESC, 0);
};

IndexColNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterIndexColName(this);
	}
};

IndexColNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitIndexColName(this);
	}
};




SQLParser.IndexColNameContext = IndexColNameContext;

SQLParser.prototype.indexColName = function() {

    var localctx = new IndexColNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, SQLParser.RULE_indexColName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 399;
        this.idName();
        this.state = 401;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_ASC || _la===SQLParser.K_DESC) {
            this.state = 400;
            localctx.Type = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SQLParser.K_ASC || _la===SQLParser.K_DESC)) {
                localctx.Type = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DataTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_dataType;
    return this;
}

DataTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeContext.prototype.constructor = DataTypeContext;


 
DataTypeContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function TypeBlobStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeBlobStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeBlobStmtContext.prototype.constructor = TypeBlobStmtContext;

SQLParser.TypeBlobStmtContext = TypeBlobStmtContext;

TypeBlobStmtContext.prototype.K_BLOB = function() {
    return this.getToken(SQLParser.K_BLOB, 0);
};
TypeBlobStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeBlobStmt(this);
	}
};

TypeBlobStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeBlobStmt(this);
	}
};


function TypeTinyTextStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeTinyTextStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeTinyTextStmtContext.prototype.constructor = TypeTinyTextStmtContext;

SQLParser.TypeTinyTextStmtContext = TypeTinyTextStmtContext;

TypeTinyTextStmtContext.prototype.K_TINYTEXT = function() {
    return this.getToken(SQLParser.K_TINYTEXT, 0);
};

TypeTinyTextStmtContext.prototype.K_BINARY = function() {
    return this.getToken(SQLParser.K_BINARY, 0);
};

TypeTinyTextStmtContext.prototype.K_CHARACTER = function() {
    return this.getToken(SQLParser.K_CHARACTER, 0);
};

TypeTinyTextStmtContext.prototype.K_SET = function() {
    return this.getToken(SQLParser.K_SET, 0);
};

TypeTinyTextStmtContext.prototype.charsetName = function() {
    return this.getTypedRuleContext(CharsetNameContext,0);
};

TypeTinyTextStmtContext.prototype.K_COLLATE = function() {
    return this.getToken(SQLParser.K_COLLATE, 0);
};

TypeTinyTextStmtContext.prototype.collateName = function() {
    return this.getTypedRuleContext(CollateNameContext,0);
};
TypeTinyTextStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeTinyTextStmt(this);
	}
};

TypeTinyTextStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeTinyTextStmt(this);
	}
};


function TypeDecimalStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeDecimalStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeDecimalStmtContext.prototype.constructor = TypeDecimalStmtContext;

SQLParser.TypeDecimalStmtContext = TypeDecimalStmtContext;

TypeDecimalStmtContext.prototype.K_DECIMAL = function() {
    return this.getToken(SQLParser.K_DECIMAL, 0);
};

TypeDecimalStmtContext.prototype.LPAR = function() {
    return this.getToken(SQLParser.LPAR, 0);
};

TypeDecimalStmtContext.prototype.INT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.INT);
    } else {
        return this.getToken(SQLParser.INT, i);
    }
};


TypeDecimalStmtContext.prototype.RPAR = function() {
    return this.getToken(SQLParser.RPAR, 0);
};

TypeDecimalStmtContext.prototype.K_UNSIGNED = function() {
    return this.getToken(SQLParser.K_UNSIGNED, 0);
};

TypeDecimalStmtContext.prototype.K_ZEROFILL = function() {
    return this.getToken(SQLParser.K_ZEROFILL, 0);
};

TypeDecimalStmtContext.prototype.COMMA = function() {
    return this.getToken(SQLParser.COMMA, 0);
};
TypeDecimalStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeDecimalStmt(this);
	}
};

TypeDecimalStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeDecimalStmt(this);
	}
};


function TypeBooleanStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeBooleanStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeBooleanStmtContext.prototype.constructor = TypeBooleanStmtContext;

SQLParser.TypeBooleanStmtContext = TypeBooleanStmtContext;

TypeBooleanStmtContext.prototype.K_BOOL = function() {
    return this.getToken(SQLParser.K_BOOL, 0);
};

TypeBooleanStmtContext.prototype.K_BOOLEAN = function() {
    return this.getToken(SQLParser.K_BOOLEAN, 0);
};
TypeBooleanStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeBooleanStmt(this);
	}
};

TypeBooleanStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeBooleanStmt(this);
	}
};


function TypeLongTextStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeLongTextStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeLongTextStmtContext.prototype.constructor = TypeLongTextStmtContext;

SQLParser.TypeLongTextStmtContext = TypeLongTextStmtContext;

TypeLongTextStmtContext.prototype.K_LONGTEXT = function() {
    return this.getToken(SQLParser.K_LONGTEXT, 0);
};

TypeLongTextStmtContext.prototype.K_BINARY = function() {
    return this.getToken(SQLParser.K_BINARY, 0);
};

TypeLongTextStmtContext.prototype.K_CHARACTER = function() {
    return this.getToken(SQLParser.K_CHARACTER, 0);
};

TypeLongTextStmtContext.prototype.K_SET = function() {
    return this.getToken(SQLParser.K_SET, 0);
};

TypeLongTextStmtContext.prototype.charsetName = function() {
    return this.getTypedRuleContext(CharsetNameContext,0);
};

TypeLongTextStmtContext.prototype.K_COLLATE = function() {
    return this.getToken(SQLParser.K_COLLATE, 0);
};

TypeLongTextStmtContext.prototype.collateName = function() {
    return this.getTypedRuleContext(CollateNameContext,0);
};
TypeLongTextStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeLongTextStmt(this);
	}
};

TypeLongTextStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeLongTextStmt(this);
	}
};


function TypeMediumBlobStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeMediumBlobStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeMediumBlobStmtContext.prototype.constructor = TypeMediumBlobStmtContext;

SQLParser.TypeMediumBlobStmtContext = TypeMediumBlobStmtContext;

TypeMediumBlobStmtContext.prototype.K_MEDIUMBLOB = function() {
    return this.getToken(SQLParser.K_MEDIUMBLOB, 0);
};
TypeMediumBlobStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeMediumBlobStmt(this);
	}
};

TypeMediumBlobStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeMediumBlobStmt(this);
	}
};


function TypeDoubleStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeDoubleStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeDoubleStmtContext.prototype.constructor = TypeDoubleStmtContext;

SQLParser.TypeDoubleStmtContext = TypeDoubleStmtContext;

TypeDoubleStmtContext.prototype.K_DOUBLE = function() {
    return this.getToken(SQLParser.K_DOUBLE, 0);
};

TypeDoubleStmtContext.prototype.LPAR = function() {
    return this.getToken(SQLParser.LPAR, 0);
};

TypeDoubleStmtContext.prototype.INT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.INT);
    } else {
        return this.getToken(SQLParser.INT, i);
    }
};


TypeDoubleStmtContext.prototype.COMMA = function() {
    return this.getToken(SQLParser.COMMA, 0);
};

TypeDoubleStmtContext.prototype.RPAR = function() {
    return this.getToken(SQLParser.RPAR, 0);
};

TypeDoubleStmtContext.prototype.K_UNSIGNED = function() {
    return this.getToken(SQLParser.K_UNSIGNED, 0);
};

TypeDoubleStmtContext.prototype.K_ZEROFILL = function() {
    return this.getToken(SQLParser.K_ZEROFILL, 0);
};
TypeDoubleStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeDoubleStmt(this);
	}
};

TypeDoubleStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeDoubleStmt(this);
	}
};


function TypeTimeStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeTimeStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeTimeStmtContext.prototype.constructor = TypeTimeStmtContext;

SQLParser.TypeTimeStmtContext = TypeTimeStmtContext;

TypeTimeStmtContext.prototype.K_TIME = function() {
    return this.getToken(SQLParser.K_TIME, 0);
};
TypeTimeStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeTimeStmt(this);
	}
};

TypeTimeStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeTimeStmt(this);
	}
};


function TypeLongBlobStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeLongBlobStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeLongBlobStmtContext.prototype.constructor = TypeLongBlobStmtContext;

SQLParser.TypeLongBlobStmtContext = TypeLongBlobStmtContext;

TypeLongBlobStmtContext.prototype.K_LONGBLOB = function() {
    return this.getToken(SQLParser.K_LONGBLOB, 0);
};
TypeLongBlobStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeLongBlobStmt(this);
	}
};

TypeLongBlobStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeLongBlobStmt(this);
	}
};


function TypeTinyIntStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeTinyIntStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeTinyIntStmtContext.prototype.constructor = TypeTinyIntStmtContext;

SQLParser.TypeTinyIntStmtContext = TypeTinyIntStmtContext;

TypeTinyIntStmtContext.prototype.K_TINYINT = function() {
    return this.getToken(SQLParser.K_TINYINT, 0);
};

TypeTinyIntStmtContext.prototype.LPAR = function() {
    return this.getToken(SQLParser.LPAR, 0);
};

TypeTinyIntStmtContext.prototype.INT = function() {
    return this.getToken(SQLParser.INT, 0);
};

TypeTinyIntStmtContext.prototype.RPAR = function() {
    return this.getToken(SQLParser.RPAR, 0);
};

TypeTinyIntStmtContext.prototype.K_UNSIGNED = function() {
    return this.getToken(SQLParser.K_UNSIGNED, 0);
};

TypeTinyIntStmtContext.prototype.K_ZEROFILL = function() {
    return this.getToken(SQLParser.K_ZEROFILL, 0);
};
TypeTinyIntStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeTinyIntStmt(this);
	}
};

TypeTinyIntStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeTinyIntStmt(this);
	}
};


function TypeTinyBlobStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeTinyBlobStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeTinyBlobStmtContext.prototype.constructor = TypeTinyBlobStmtContext;

SQLParser.TypeTinyBlobStmtContext = TypeTinyBlobStmtContext;

TypeTinyBlobStmtContext.prototype.K_TINYBLOB = function() {
    return this.getToken(SQLParser.K_TINYBLOB, 0);
};
TypeTinyBlobStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeTinyBlobStmt(this);
	}
};

TypeTinyBlobStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeTinyBlobStmt(this);
	}
};


function TypeSetStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeSetStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeSetStmtContext.prototype.constructor = TypeSetStmtContext;

SQLParser.TypeSetStmtContext = TypeSetStmtContext;

TypeSetStmtContext.prototype.K_SET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.K_SET);
    } else {
        return this.getToken(SQLParser.K_SET, i);
    }
};


TypeSetStmtContext.prototype.LPAR = function() {
    return this.getToken(SQLParser.LPAR, 0);
};

TypeSetStmtContext.prototype.stringItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StringItemContext);
    } else {
        return this.getTypedRuleContext(StringItemContext,i);
    }
};

TypeSetStmtContext.prototype.RPAR = function() {
    return this.getToken(SQLParser.RPAR, 0);
};

TypeSetStmtContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


TypeSetStmtContext.prototype.K_CHARACTER = function() {
    return this.getToken(SQLParser.K_CHARACTER, 0);
};

TypeSetStmtContext.prototype.charsetName = function() {
    return this.getTypedRuleContext(CharsetNameContext,0);
};

TypeSetStmtContext.prototype.K_COLLATE = function() {
    return this.getToken(SQLParser.K_COLLATE, 0);
};

TypeSetStmtContext.prototype.collateName = function() {
    return this.getTypedRuleContext(CollateNameContext,0);
};
TypeSetStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeSetStmt(this);
	}
};

TypeSetStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeSetStmt(this);
	}
};


function TypeFloatStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeFloatStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeFloatStmtContext.prototype.constructor = TypeFloatStmtContext;

SQLParser.TypeFloatStmtContext = TypeFloatStmtContext;

TypeFloatStmtContext.prototype.K_FLOAT = function() {
    return this.getToken(SQLParser.K_FLOAT, 0);
};

TypeFloatStmtContext.prototype.LPAR = function() {
    return this.getToken(SQLParser.LPAR, 0);
};

TypeFloatStmtContext.prototype.INT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.INT);
    } else {
        return this.getToken(SQLParser.INT, i);
    }
};


TypeFloatStmtContext.prototype.COMMA = function() {
    return this.getToken(SQLParser.COMMA, 0);
};

TypeFloatStmtContext.prototype.RPAR = function() {
    return this.getToken(SQLParser.RPAR, 0);
};

TypeFloatStmtContext.prototype.K_UNSIGNED = function() {
    return this.getToken(SQLParser.K_UNSIGNED, 0);
};

TypeFloatStmtContext.prototype.K_ZEROFILL = function() {
    return this.getToken(SQLParser.K_ZEROFILL, 0);
};
TypeFloatStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeFloatStmt(this);
	}
};

TypeFloatStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeFloatStmt(this);
	}
};


function TypeDateStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeDateStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeDateStmtContext.prototype.constructor = TypeDateStmtContext;

SQLParser.TypeDateStmtContext = TypeDateStmtContext;

TypeDateStmtContext.prototype.K_DATE = function() {
    return this.getToken(SQLParser.K_DATE, 0);
};
TypeDateStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeDateStmt(this);
	}
};

TypeDateStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeDateStmt(this);
	}
};


function TypeVarCharStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeVarCharStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeVarCharStmtContext.prototype.constructor = TypeVarCharStmtContext;

SQLParser.TypeVarCharStmtContext = TypeVarCharStmtContext;

TypeVarCharStmtContext.prototype.K_VARCHAR = function() {
    return this.getToken(SQLParser.K_VARCHAR, 0);
};

TypeVarCharStmtContext.prototype.LPAR = function() {
    return this.getToken(SQLParser.LPAR, 0);
};

TypeVarCharStmtContext.prototype.INT = function() {
    return this.getToken(SQLParser.INT, 0);
};

TypeVarCharStmtContext.prototype.RPAR = function() {
    return this.getToken(SQLParser.RPAR, 0);
};

TypeVarCharStmtContext.prototype.K_CHARACTER = function() {
    return this.getToken(SQLParser.K_CHARACTER, 0);
};

TypeVarCharStmtContext.prototype.K_SET = function() {
    return this.getToken(SQLParser.K_SET, 0);
};

TypeVarCharStmtContext.prototype.charsetName = function() {
    return this.getTypedRuleContext(CharsetNameContext,0);
};

TypeVarCharStmtContext.prototype.K_COLLATE = function() {
    return this.getToken(SQLParser.K_COLLATE, 0);
};

TypeVarCharStmtContext.prototype.collateName = function() {
    return this.getTypedRuleContext(CollateNameContext,0);
};
TypeVarCharStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeVarCharStmt(this);
	}
};

TypeVarCharStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeVarCharStmt(this);
	}
};


function TypeMediumTextStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeMediumTextStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeMediumTextStmtContext.prototype.constructor = TypeMediumTextStmtContext;

SQLParser.TypeMediumTextStmtContext = TypeMediumTextStmtContext;

TypeMediumTextStmtContext.prototype.K_MEDIUMTEXT = function() {
    return this.getToken(SQLParser.K_MEDIUMTEXT, 0);
};

TypeMediumTextStmtContext.prototype.K_BINARY = function() {
    return this.getToken(SQLParser.K_BINARY, 0);
};

TypeMediumTextStmtContext.prototype.K_CHARACTER = function() {
    return this.getToken(SQLParser.K_CHARACTER, 0);
};

TypeMediumTextStmtContext.prototype.K_SET = function() {
    return this.getToken(SQLParser.K_SET, 0);
};

TypeMediumTextStmtContext.prototype.charsetName = function() {
    return this.getTypedRuleContext(CharsetNameContext,0);
};

TypeMediumTextStmtContext.prototype.K_COLLATE = function() {
    return this.getToken(SQLParser.K_COLLATE, 0);
};

TypeMediumTextStmtContext.prototype.collateName = function() {
    return this.getTypedRuleContext(CollateNameContext,0);
};
TypeMediumTextStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeMediumTextStmt(this);
	}
};

TypeMediumTextStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeMediumTextStmt(this);
	}
};


function TypeTimeStampStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeTimeStampStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeTimeStampStmtContext.prototype.constructor = TypeTimeStampStmtContext;

SQLParser.TypeTimeStampStmtContext = TypeTimeStampStmtContext;

TypeTimeStampStmtContext.prototype.K_TIMESTAMP = function() {
    return this.getToken(SQLParser.K_TIMESTAMP, 0);
};
TypeTimeStampStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeTimeStampStmt(this);
	}
};

TypeTimeStampStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeTimeStampStmt(this);
	}
};


function TypeMediumIntStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeMediumIntStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeMediumIntStmtContext.prototype.constructor = TypeMediumIntStmtContext;

SQLParser.TypeMediumIntStmtContext = TypeMediumIntStmtContext;

TypeMediumIntStmtContext.prototype.K_MEDIUMINT = function() {
    return this.getToken(SQLParser.K_MEDIUMINT, 0);
};

TypeMediumIntStmtContext.prototype.LPAR = function() {
    return this.getToken(SQLParser.LPAR, 0);
};

TypeMediumIntStmtContext.prototype.INT = function() {
    return this.getToken(SQLParser.INT, 0);
};

TypeMediumIntStmtContext.prototype.RPAR = function() {
    return this.getToken(SQLParser.RPAR, 0);
};

TypeMediumIntStmtContext.prototype.K_UNSIGNED = function() {
    return this.getToken(SQLParser.K_UNSIGNED, 0);
};

TypeMediumIntStmtContext.prototype.K_ZEROFILL = function() {
    return this.getToken(SQLParser.K_ZEROFILL, 0);
};
TypeMediumIntStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeMediumIntStmt(this);
	}
};

TypeMediumIntStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeMediumIntStmt(this);
	}
};


function TypeEnumStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeEnumStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeEnumStmtContext.prototype.constructor = TypeEnumStmtContext;

SQLParser.TypeEnumStmtContext = TypeEnumStmtContext;

TypeEnumStmtContext.prototype.K_ENUM = function() {
    return this.getToken(SQLParser.K_ENUM, 0);
};

TypeEnumStmtContext.prototype.LPAR = function() {
    return this.getToken(SQLParser.LPAR, 0);
};

TypeEnumStmtContext.prototype.stringItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StringItemContext);
    } else {
        return this.getTypedRuleContext(StringItemContext,i);
    }
};

TypeEnumStmtContext.prototype.RPAR = function() {
    return this.getToken(SQLParser.RPAR, 0);
};

TypeEnumStmtContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.COMMA);
    } else {
        return this.getToken(SQLParser.COMMA, i);
    }
};


TypeEnumStmtContext.prototype.K_CHARACTER = function() {
    return this.getToken(SQLParser.K_CHARACTER, 0);
};

TypeEnumStmtContext.prototype.K_SET = function() {
    return this.getToken(SQLParser.K_SET, 0);
};

TypeEnumStmtContext.prototype.charsetName = function() {
    return this.getTypedRuleContext(CharsetNameContext,0);
};

TypeEnumStmtContext.prototype.K_COLLATE = function() {
    return this.getToken(SQLParser.K_COLLATE, 0);
};

TypeEnumStmtContext.prototype.collateName = function() {
    return this.getTypedRuleContext(CollateNameContext,0);
};
TypeEnumStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeEnumStmt(this);
	}
};

TypeEnumStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeEnumStmt(this);
	}
};


function TypeBitStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeBitStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeBitStmtContext.prototype.constructor = TypeBitStmtContext;

SQLParser.TypeBitStmtContext = TypeBitStmtContext;

TypeBitStmtContext.prototype.K_BIT = function() {
    return this.getToken(SQLParser.K_BIT, 0);
};

TypeBitStmtContext.prototype.LPAR = function() {
    return this.getToken(SQLParser.LPAR, 0);
};

TypeBitStmtContext.prototype.INT = function() {
    return this.getToken(SQLParser.INT, 0);
};

TypeBitStmtContext.prototype.RPAR = function() {
    return this.getToken(SQLParser.RPAR, 0);
};
TypeBitStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeBitStmt(this);
	}
};

TypeBitStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeBitStmt(this);
	}
};


function TypeNumericStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeNumericStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeNumericStmtContext.prototype.constructor = TypeNumericStmtContext;

SQLParser.TypeNumericStmtContext = TypeNumericStmtContext;

TypeNumericStmtContext.prototype.K_NUMERIC = function() {
    return this.getToken(SQLParser.K_NUMERIC, 0);
};

TypeNumericStmtContext.prototype.LPAR = function() {
    return this.getToken(SQLParser.LPAR, 0);
};

TypeNumericStmtContext.prototype.INT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.INT);
    } else {
        return this.getToken(SQLParser.INT, i);
    }
};


TypeNumericStmtContext.prototype.RPAR = function() {
    return this.getToken(SQLParser.RPAR, 0);
};

TypeNumericStmtContext.prototype.K_UNSIGNED = function() {
    return this.getToken(SQLParser.K_UNSIGNED, 0);
};

TypeNumericStmtContext.prototype.K_ZEROFILL = function() {
    return this.getToken(SQLParser.K_ZEROFILL, 0);
};

TypeNumericStmtContext.prototype.COMMA = function() {
    return this.getToken(SQLParser.COMMA, 0);
};
TypeNumericStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeNumericStmt(this);
	}
};

TypeNumericStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeNumericStmt(this);
	}
};


function TypeRealStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeRealStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeRealStmtContext.prototype.constructor = TypeRealStmtContext;

SQLParser.TypeRealStmtContext = TypeRealStmtContext;

TypeRealStmtContext.prototype.K_REAL = function() {
    return this.getToken(SQLParser.K_REAL, 0);
};

TypeRealStmtContext.prototype.LPAR = function() {
    return this.getToken(SQLParser.LPAR, 0);
};

TypeRealStmtContext.prototype.INT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.INT);
    } else {
        return this.getToken(SQLParser.INT, i);
    }
};


TypeRealStmtContext.prototype.COMMA = function() {
    return this.getToken(SQLParser.COMMA, 0);
};

TypeRealStmtContext.prototype.RPAR = function() {
    return this.getToken(SQLParser.RPAR, 0);
};

TypeRealStmtContext.prototype.K_UNSIGNED = function() {
    return this.getToken(SQLParser.K_UNSIGNED, 0);
};

TypeRealStmtContext.prototype.K_ZEROFILL = function() {
    return this.getToken(SQLParser.K_ZEROFILL, 0);
};
TypeRealStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeRealStmt(this);
	}
};

TypeRealStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeRealStmt(this);
	}
};


function TypeTextStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeTextStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeTextStmtContext.prototype.constructor = TypeTextStmtContext;

SQLParser.TypeTextStmtContext = TypeTextStmtContext;

TypeTextStmtContext.prototype.K_TEXT = function() {
    return this.getToken(SQLParser.K_TEXT, 0);
};

TypeTextStmtContext.prototype.K_BINARY = function() {
    return this.getToken(SQLParser.K_BINARY, 0);
};

TypeTextStmtContext.prototype.K_CHARACTER = function() {
    return this.getToken(SQLParser.K_CHARACTER, 0);
};

TypeTextStmtContext.prototype.K_SET = function() {
    return this.getToken(SQLParser.K_SET, 0);
};

TypeTextStmtContext.prototype.charsetName = function() {
    return this.getTypedRuleContext(CharsetNameContext,0);
};

TypeTextStmtContext.prototype.K_COLLATE = function() {
    return this.getToken(SQLParser.K_COLLATE, 0);
};

TypeTextStmtContext.prototype.collateName = function() {
    return this.getTypedRuleContext(CollateNameContext,0);
};
TypeTextStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeTextStmt(this);
	}
};

TypeTextStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeTextStmt(this);
	}
};


function TypeBigIntStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeBigIntStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeBigIntStmtContext.prototype.constructor = TypeBigIntStmtContext;

SQLParser.TypeBigIntStmtContext = TypeBigIntStmtContext;

TypeBigIntStmtContext.prototype.K_BIGINT = function() {
    return this.getToken(SQLParser.K_BIGINT, 0);
};

TypeBigIntStmtContext.prototype.LPAR = function() {
    return this.getToken(SQLParser.LPAR, 0);
};

TypeBigIntStmtContext.prototype.INT = function() {
    return this.getToken(SQLParser.INT, 0);
};

TypeBigIntStmtContext.prototype.RPAR = function() {
    return this.getToken(SQLParser.RPAR, 0);
};

TypeBigIntStmtContext.prototype.K_UNSIGNED = function() {
    return this.getToken(SQLParser.K_UNSIGNED, 0);
};

TypeBigIntStmtContext.prototype.K_ZEROFILL = function() {
    return this.getToken(SQLParser.K_ZEROFILL, 0);
};
TypeBigIntStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeBigIntStmt(this);
	}
};

TypeBigIntStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeBigIntStmt(this);
	}
};


function TypeJsonStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeJsonStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeJsonStmtContext.prototype.constructor = TypeJsonStmtContext;

SQLParser.TypeJsonStmtContext = TypeJsonStmtContext;

TypeJsonStmtContext.prototype.K_JSON = function() {
    return this.getToken(SQLParser.K_JSON, 0);
};
TypeJsonStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeJsonStmt(this);
	}
};

TypeJsonStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeJsonStmt(this);
	}
};


function TypeDateTimeStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeDateTimeStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeDateTimeStmtContext.prototype.constructor = TypeDateTimeStmtContext;

SQLParser.TypeDateTimeStmtContext = TypeDateTimeStmtContext;

TypeDateTimeStmtContext.prototype.K_DATETIME = function() {
    return this.getToken(SQLParser.K_DATETIME, 0);
};
TypeDateTimeStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeDateTimeStmt(this);
	}
};

TypeDateTimeStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeDateTimeStmt(this);
	}
};


function TypeBinaryStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeBinaryStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeBinaryStmtContext.prototype.constructor = TypeBinaryStmtContext;

SQLParser.TypeBinaryStmtContext = TypeBinaryStmtContext;

TypeBinaryStmtContext.prototype.K_BINARY = function() {
    return this.getToken(SQLParser.K_BINARY, 0);
};

TypeBinaryStmtContext.prototype.LPAR = function() {
    return this.getToken(SQLParser.LPAR, 0);
};

TypeBinaryStmtContext.prototype.INT = function() {
    return this.getToken(SQLParser.INT, 0);
};

TypeBinaryStmtContext.prototype.RPAR = function() {
    return this.getToken(SQLParser.RPAR, 0);
};
TypeBinaryStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeBinaryStmt(this);
	}
};

TypeBinaryStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeBinaryStmt(this);
	}
};


function TypeYearStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeYearStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeYearStmtContext.prototype.constructor = TypeYearStmtContext;

SQLParser.TypeYearStmtContext = TypeYearStmtContext;

TypeYearStmtContext.prototype.K_YEAR = function() {
    return this.getToken(SQLParser.K_YEAR, 0);
};
TypeYearStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeYearStmt(this);
	}
};

TypeYearStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeYearStmt(this);
	}
};


function TypeIntStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeIntStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeIntStmtContext.prototype.constructor = TypeIntStmtContext;

SQLParser.TypeIntStmtContext = TypeIntStmtContext;

TypeIntStmtContext.prototype.K_INT = function() {
    return this.getToken(SQLParser.K_INT, 0);
};

TypeIntStmtContext.prototype.LPAR = function() {
    return this.getToken(SQLParser.LPAR, 0);
};

TypeIntStmtContext.prototype.INT = function() {
    return this.getToken(SQLParser.INT, 0);
};

TypeIntStmtContext.prototype.RPAR = function() {
    return this.getToken(SQLParser.RPAR, 0);
};

TypeIntStmtContext.prototype.K_UNSIGNED = function() {
    return this.getToken(SQLParser.K_UNSIGNED, 0);
};

TypeIntStmtContext.prototype.K_ZEROFILL = function() {
    return this.getToken(SQLParser.K_ZEROFILL, 0);
};
TypeIntStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeIntStmt(this);
	}
};

TypeIntStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeIntStmt(this);
	}
};


function TypeVarBinaryStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeVarBinaryStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeVarBinaryStmtContext.prototype.constructor = TypeVarBinaryStmtContext;

SQLParser.TypeVarBinaryStmtContext = TypeVarBinaryStmtContext;

TypeVarBinaryStmtContext.prototype.K_VARBINARY = function() {
    return this.getToken(SQLParser.K_VARBINARY, 0);
};

TypeVarBinaryStmtContext.prototype.LPAR = function() {
    return this.getToken(SQLParser.LPAR, 0);
};

TypeVarBinaryStmtContext.prototype.INT = function() {
    return this.getToken(SQLParser.INT, 0);
};

TypeVarBinaryStmtContext.prototype.RPAR = function() {
    return this.getToken(SQLParser.RPAR, 0);
};
TypeVarBinaryStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeVarBinaryStmt(this);
	}
};

TypeVarBinaryStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeVarBinaryStmt(this);
	}
};


function TypeCharStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeCharStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeCharStmtContext.prototype.constructor = TypeCharStmtContext;

SQLParser.TypeCharStmtContext = TypeCharStmtContext;

TypeCharStmtContext.prototype.K_CHAR = function() {
    return this.getToken(SQLParser.K_CHAR, 0);
};

TypeCharStmtContext.prototype.LPAR = function() {
    return this.getToken(SQLParser.LPAR, 0);
};

TypeCharStmtContext.prototype.INT = function() {
    return this.getToken(SQLParser.INT, 0);
};

TypeCharStmtContext.prototype.RPAR = function() {
    return this.getToken(SQLParser.RPAR, 0);
};

TypeCharStmtContext.prototype.K_CHARACTER = function() {
    return this.getToken(SQLParser.K_CHARACTER, 0);
};

TypeCharStmtContext.prototype.K_SET = function() {
    return this.getToken(SQLParser.K_SET, 0);
};

TypeCharStmtContext.prototype.charsetName = function() {
    return this.getTypedRuleContext(CharsetNameContext,0);
};

TypeCharStmtContext.prototype.K_COLLATE = function() {
    return this.getToken(SQLParser.K_COLLATE, 0);
};

TypeCharStmtContext.prototype.collateName = function() {
    return this.getTypedRuleContext(CollateNameContext,0);
};
TypeCharStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeCharStmt(this);
	}
};

TypeCharStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeCharStmt(this);
	}
};


function TypeSmallIntStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeSmallIntStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeSmallIntStmtContext.prototype.constructor = TypeSmallIntStmtContext;

SQLParser.TypeSmallIntStmtContext = TypeSmallIntStmtContext;

TypeSmallIntStmtContext.prototype.K_SMALLINT = function() {
    return this.getToken(SQLParser.K_SMALLINT, 0);
};

TypeSmallIntStmtContext.prototype.LPAR = function() {
    return this.getToken(SQLParser.LPAR, 0);
};

TypeSmallIntStmtContext.prototype.INT = function() {
    return this.getToken(SQLParser.INT, 0);
};

TypeSmallIntStmtContext.prototype.RPAR = function() {
    return this.getToken(SQLParser.RPAR, 0);
};

TypeSmallIntStmtContext.prototype.K_UNSIGNED = function() {
    return this.getToken(SQLParser.K_UNSIGNED, 0);
};

TypeSmallIntStmtContext.prototype.K_ZEROFILL = function() {
    return this.getToken(SQLParser.K_ZEROFILL, 0);
};
TypeSmallIntStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeSmallIntStmt(this);
	}
};

TypeSmallIntStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeSmallIntStmt(this);
	}
};


function TypeIntegerStmtContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeIntegerStmtContext.prototype = Object.create(DataTypeContext.prototype);
TypeIntegerStmtContext.prototype.constructor = TypeIntegerStmtContext;

SQLParser.TypeIntegerStmtContext = TypeIntegerStmtContext;

TypeIntegerStmtContext.prototype.K_INTEGER = function() {
    return this.getToken(SQLParser.K_INTEGER, 0);
};

TypeIntegerStmtContext.prototype.LPAR = function() {
    return this.getToken(SQLParser.LPAR, 0);
};

TypeIntegerStmtContext.prototype.INT = function() {
    return this.getToken(SQLParser.INT, 0);
};

TypeIntegerStmtContext.prototype.RPAR = function() {
    return this.getToken(SQLParser.RPAR, 0);
};

TypeIntegerStmtContext.prototype.K_UNSIGNED = function() {
    return this.getToken(SQLParser.K_UNSIGNED, 0);
};

TypeIntegerStmtContext.prototype.K_ZEROFILL = function() {
    return this.getToken(SQLParser.K_ZEROFILL, 0);
};
TypeIntegerStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTypeIntegerStmt(this);
	}
};

TypeIntegerStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTypeIntegerStmt(this);
	}
};



SQLParser.DataTypeContext = DataTypeContext;

SQLParser.prototype.dataType = function() {

    var localctx = new DataTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, SQLParser.RULE_dataType);
    var _la = 0; // Token type
    try {
        this.state = 698;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SQLParser.K_BIT:
            localctx = new TypeBitStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 403;
            this.match(SQLParser.K_BIT);
            this.state = 407;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.LPAR) {
                this.state = 404;
                this.match(SQLParser.LPAR);
                this.state = 405;
                this.match(SQLParser.INT);
                this.state = 406;
                this.match(SQLParser.RPAR);
            }

            break;
        case SQLParser.K_TINYINT:
            localctx = new TypeTinyIntStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 409;
            this.match(SQLParser.K_TINYINT);
            this.state = 413;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.LPAR) {
                this.state = 410;
                this.match(SQLParser.LPAR);
                this.state = 411;
                this.match(SQLParser.INT);
                this.state = 412;
                this.match(SQLParser.RPAR);
            }

            this.state = 416;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_UNSIGNED) {
                this.state = 415;
                this.match(SQLParser.K_UNSIGNED);
            }

            this.state = 419;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_ZEROFILL) {
                this.state = 418;
                this.match(SQLParser.K_ZEROFILL);
            }

            break;
        case SQLParser.K_SMALLINT:
            localctx = new TypeSmallIntStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 421;
            this.match(SQLParser.K_SMALLINT);
            this.state = 425;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.LPAR) {
                this.state = 422;
                this.match(SQLParser.LPAR);
                this.state = 423;
                this.match(SQLParser.INT);
                this.state = 424;
                this.match(SQLParser.RPAR);
            }

            this.state = 428;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_UNSIGNED) {
                this.state = 427;
                this.match(SQLParser.K_UNSIGNED);
            }

            this.state = 431;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_ZEROFILL) {
                this.state = 430;
                this.match(SQLParser.K_ZEROFILL);
            }

            break;
        case SQLParser.K_MEDIUMINT:
            localctx = new TypeMediumIntStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 433;
            this.match(SQLParser.K_MEDIUMINT);
            this.state = 437;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.LPAR) {
                this.state = 434;
                this.match(SQLParser.LPAR);
                this.state = 435;
                this.match(SQLParser.INT);
                this.state = 436;
                this.match(SQLParser.RPAR);
            }

            this.state = 440;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_UNSIGNED) {
                this.state = 439;
                this.match(SQLParser.K_UNSIGNED);
            }

            this.state = 443;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_ZEROFILL) {
                this.state = 442;
                this.match(SQLParser.K_ZEROFILL);
            }

            break;
        case SQLParser.K_INT:
            localctx = new TypeIntStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 445;
            this.match(SQLParser.K_INT);
            this.state = 449;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.LPAR) {
                this.state = 446;
                this.match(SQLParser.LPAR);
                this.state = 447;
                this.match(SQLParser.INT);
                this.state = 448;
                this.match(SQLParser.RPAR);
            }

            this.state = 452;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_UNSIGNED) {
                this.state = 451;
                this.match(SQLParser.K_UNSIGNED);
            }

            this.state = 455;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_ZEROFILL) {
                this.state = 454;
                this.match(SQLParser.K_ZEROFILL);
            }

            break;
        case SQLParser.K_INTEGER:
            localctx = new TypeIntegerStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 457;
            this.match(SQLParser.K_INTEGER);
            this.state = 461;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.LPAR) {
                this.state = 458;
                this.match(SQLParser.LPAR);
                this.state = 459;
                this.match(SQLParser.INT);
                this.state = 460;
                this.match(SQLParser.RPAR);
            }

            this.state = 464;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_UNSIGNED) {
                this.state = 463;
                this.match(SQLParser.K_UNSIGNED);
            }

            this.state = 467;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_ZEROFILL) {
                this.state = 466;
                this.match(SQLParser.K_ZEROFILL);
            }

            break;
        case SQLParser.K_BIGINT:
            localctx = new TypeBigIntStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 469;
            this.match(SQLParser.K_BIGINT);
            this.state = 473;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.LPAR) {
                this.state = 470;
                this.match(SQLParser.LPAR);
                this.state = 471;
                this.match(SQLParser.INT);
                this.state = 472;
                this.match(SQLParser.RPAR);
            }

            this.state = 476;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_UNSIGNED) {
                this.state = 475;
                this.match(SQLParser.K_UNSIGNED);
            }

            this.state = 479;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_ZEROFILL) {
                this.state = 478;
                this.match(SQLParser.K_ZEROFILL);
            }

            break;
        case SQLParser.K_REAL:
            localctx = new TypeRealStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 481;
            this.match(SQLParser.K_REAL);
            this.state = 487;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.LPAR) {
                this.state = 482;
                this.match(SQLParser.LPAR);
                this.state = 483;
                this.match(SQLParser.INT);
                this.state = 484;
                this.match(SQLParser.COMMA);
                this.state = 485;
                this.match(SQLParser.INT);
                this.state = 486;
                this.match(SQLParser.RPAR);
            }

            this.state = 490;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_UNSIGNED) {
                this.state = 489;
                this.match(SQLParser.K_UNSIGNED);
            }

            this.state = 493;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_ZEROFILL) {
                this.state = 492;
                this.match(SQLParser.K_ZEROFILL);
            }

            break;
        case SQLParser.K_DOUBLE:
            localctx = new TypeDoubleStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 495;
            this.match(SQLParser.K_DOUBLE);
            this.state = 501;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.LPAR) {
                this.state = 496;
                this.match(SQLParser.LPAR);
                this.state = 497;
                this.match(SQLParser.INT);
                this.state = 498;
                this.match(SQLParser.COMMA);
                this.state = 499;
                this.match(SQLParser.INT);
                this.state = 500;
                this.match(SQLParser.RPAR);
            }

            this.state = 504;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_UNSIGNED) {
                this.state = 503;
                this.match(SQLParser.K_UNSIGNED);
            }

            this.state = 507;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_ZEROFILL) {
                this.state = 506;
                this.match(SQLParser.K_ZEROFILL);
            }

            break;
        case SQLParser.K_FLOAT:
            localctx = new TypeFloatStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 509;
            this.match(SQLParser.K_FLOAT);
            this.state = 515;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.LPAR) {
                this.state = 510;
                this.match(SQLParser.LPAR);
                this.state = 511;
                this.match(SQLParser.INT);
                this.state = 512;
                this.match(SQLParser.COMMA);
                this.state = 513;
                this.match(SQLParser.INT);
                this.state = 514;
                this.match(SQLParser.RPAR);
            }

            this.state = 518;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_UNSIGNED) {
                this.state = 517;
                this.match(SQLParser.K_UNSIGNED);
            }

            this.state = 521;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_ZEROFILL) {
                this.state = 520;
                this.match(SQLParser.K_ZEROFILL);
            }

            break;
        case SQLParser.K_DECIMAL:
            localctx = new TypeDecimalStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 523;
            this.match(SQLParser.K_DECIMAL);
            this.state = 531;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.LPAR) {
                this.state = 524;
                this.match(SQLParser.LPAR);
                this.state = 525;
                this.match(SQLParser.INT);
                this.state = 528;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SQLParser.COMMA) {
                    this.state = 526;
                    this.match(SQLParser.COMMA);
                    this.state = 527;
                    this.match(SQLParser.INT);
                }

                this.state = 530;
                this.match(SQLParser.RPAR);
            }

            this.state = 534;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_UNSIGNED) {
                this.state = 533;
                this.match(SQLParser.K_UNSIGNED);
            }

            this.state = 537;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_ZEROFILL) {
                this.state = 536;
                this.match(SQLParser.K_ZEROFILL);
            }

            break;
        case SQLParser.K_NUMERIC:
            localctx = new TypeNumericStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 539;
            this.match(SQLParser.K_NUMERIC);
            this.state = 547;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.LPAR) {
                this.state = 540;
                this.match(SQLParser.LPAR);
                this.state = 541;
                this.match(SQLParser.INT);
                this.state = 544;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SQLParser.COMMA) {
                    this.state = 542;
                    this.match(SQLParser.COMMA);
                    this.state = 543;
                    this.match(SQLParser.INT);
                }

                this.state = 546;
                this.match(SQLParser.RPAR);
            }

            this.state = 550;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_UNSIGNED) {
                this.state = 549;
                this.match(SQLParser.K_UNSIGNED);
            }

            this.state = 553;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_ZEROFILL) {
                this.state = 552;
                this.match(SQLParser.K_ZEROFILL);
            }

            break;
        case SQLParser.K_BOOL:
        case SQLParser.K_BOOLEAN:
            localctx = new TypeBooleanStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 555;
            _la = this._input.LA(1);
            if(!(_la===SQLParser.K_BOOL || _la===SQLParser.K_BOOLEAN)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case SQLParser.K_DATE:
            localctx = new TypeDateStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 556;
            this.match(SQLParser.K_DATE);
            break;
        case SQLParser.K_TIME:
            localctx = new TypeTimeStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 557;
            this.match(SQLParser.K_TIME);
            break;
        case SQLParser.K_TIMESTAMP:
            localctx = new TypeTimeStampStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 16);
            this.state = 558;
            this.match(SQLParser.K_TIMESTAMP);
            break;
        case SQLParser.K_DATETIME:
            localctx = new TypeDateTimeStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 17);
            this.state = 559;
            this.match(SQLParser.K_DATETIME);
            break;
        case SQLParser.K_YEAR:
            localctx = new TypeYearStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 18);
            this.state = 560;
            this.match(SQLParser.K_YEAR);
            break;
        case SQLParser.K_CHAR:
            localctx = new TypeCharStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 19);
            this.state = 561;
            this.match(SQLParser.K_CHAR);
            this.state = 565;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.LPAR) {
                this.state = 562;
                this.match(SQLParser.LPAR);
                this.state = 563;
                this.match(SQLParser.INT);
                this.state = 564;
                this.match(SQLParser.RPAR);
            }

            this.state = 570;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_CHARACTER) {
                this.state = 567;
                this.match(SQLParser.K_CHARACTER);
                this.state = 568;
                this.match(SQLParser.K_SET);
                this.state = 569;
                this.charsetName();
            }

            this.state = 574;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_COLLATE) {
                this.state = 572;
                this.match(SQLParser.K_COLLATE);
                this.state = 573;
                this.collateName();
            }

            break;
        case SQLParser.K_VARCHAR:
            localctx = new TypeVarCharStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 20);
            this.state = 576;
            this.match(SQLParser.K_VARCHAR);
            this.state = 577;
            this.match(SQLParser.LPAR);
            this.state = 578;
            this.match(SQLParser.INT);
            this.state = 579;
            this.match(SQLParser.RPAR);
            this.state = 583;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_CHARACTER) {
                this.state = 580;
                this.match(SQLParser.K_CHARACTER);
                this.state = 581;
                this.match(SQLParser.K_SET);
                this.state = 582;
                this.charsetName();
            }

            this.state = 587;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_COLLATE) {
                this.state = 585;
                this.match(SQLParser.K_COLLATE);
                this.state = 586;
                this.collateName();
            }

            break;
        case SQLParser.K_BINARY:
            localctx = new TypeBinaryStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 21);
            this.state = 589;
            this.match(SQLParser.K_BINARY);
            this.state = 593;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.LPAR) {
                this.state = 590;
                this.match(SQLParser.LPAR);
                this.state = 591;
                this.match(SQLParser.INT);
                this.state = 592;
                this.match(SQLParser.RPAR);
            }

            break;
        case SQLParser.K_VARBINARY:
            localctx = new TypeVarBinaryStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 22);
            this.state = 595;
            this.match(SQLParser.K_VARBINARY);
            this.state = 596;
            this.match(SQLParser.LPAR);
            this.state = 597;
            this.match(SQLParser.INT);
            this.state = 598;
            this.match(SQLParser.RPAR);
            break;
        case SQLParser.K_TINYBLOB:
            localctx = new TypeTinyBlobStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 23);
            this.state = 599;
            this.match(SQLParser.K_TINYBLOB);
            break;
        case SQLParser.K_BLOB:
            localctx = new TypeBlobStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 24);
            this.state = 600;
            this.match(SQLParser.K_BLOB);
            break;
        case SQLParser.K_MEDIUMBLOB:
            localctx = new TypeMediumBlobStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 25);
            this.state = 601;
            this.match(SQLParser.K_MEDIUMBLOB);
            break;
        case SQLParser.K_LONGBLOB:
            localctx = new TypeLongBlobStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 26);
            this.state = 602;
            this.match(SQLParser.K_LONGBLOB);
            break;
        case SQLParser.K_JSON:
            localctx = new TypeJsonStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 27);
            this.state = 603;
            this.match(SQLParser.K_JSON);
            break;
        case SQLParser.K_TINYTEXT:
            localctx = new TypeTinyTextStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 28);
            this.state = 604;
            this.match(SQLParser.K_TINYTEXT);
            this.state = 606;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_BINARY) {
                this.state = 605;
                this.match(SQLParser.K_BINARY);
            }

            this.state = 611;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_CHARACTER) {
                this.state = 608;
                this.match(SQLParser.K_CHARACTER);
                this.state = 609;
                this.match(SQLParser.K_SET);
                this.state = 610;
                this.charsetName();
            }

            this.state = 615;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_COLLATE) {
                this.state = 613;
                this.match(SQLParser.K_COLLATE);
                this.state = 614;
                this.collateName();
            }

            break;
        case SQLParser.K_TEXT:
            localctx = new TypeTextStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 29);
            this.state = 617;
            this.match(SQLParser.K_TEXT);
            this.state = 619;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_BINARY) {
                this.state = 618;
                this.match(SQLParser.K_BINARY);
            }

            this.state = 624;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_CHARACTER) {
                this.state = 621;
                this.match(SQLParser.K_CHARACTER);
                this.state = 622;
                this.match(SQLParser.K_SET);
                this.state = 623;
                this.charsetName();
            }

            this.state = 628;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_COLLATE) {
                this.state = 626;
                this.match(SQLParser.K_COLLATE);
                this.state = 627;
                this.collateName();
            }

            break;
        case SQLParser.K_MEDIUMTEXT:
            localctx = new TypeMediumTextStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 30);
            this.state = 630;
            this.match(SQLParser.K_MEDIUMTEXT);
            this.state = 632;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_BINARY) {
                this.state = 631;
                this.match(SQLParser.K_BINARY);
            }

            this.state = 637;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_CHARACTER) {
                this.state = 634;
                this.match(SQLParser.K_CHARACTER);
                this.state = 635;
                this.match(SQLParser.K_SET);
                this.state = 636;
                this.charsetName();
            }

            this.state = 641;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_COLLATE) {
                this.state = 639;
                this.match(SQLParser.K_COLLATE);
                this.state = 640;
                this.collateName();
            }

            break;
        case SQLParser.K_LONGTEXT:
            localctx = new TypeLongTextStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 31);
            this.state = 643;
            this.match(SQLParser.K_LONGTEXT);
            this.state = 645;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_BINARY) {
                this.state = 644;
                this.match(SQLParser.K_BINARY);
            }

            this.state = 650;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_CHARACTER) {
                this.state = 647;
                this.match(SQLParser.K_CHARACTER);
                this.state = 648;
                this.match(SQLParser.K_SET);
                this.state = 649;
                this.charsetName();
            }

            this.state = 654;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_COLLATE) {
                this.state = 652;
                this.match(SQLParser.K_COLLATE);
                this.state = 653;
                this.collateName();
            }

            break;
        case SQLParser.K_ENUM:
            localctx = new TypeEnumStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 32);
            this.state = 656;
            this.match(SQLParser.K_ENUM);
            this.state = 657;
            this.match(SQLParser.LPAR);
            this.state = 663;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,102,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 658;
                    this.stringItem();
                    this.state = 659;
                    this.match(SQLParser.COMMA); 
                }
                this.state = 665;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,102,this._ctx);
            }

            this.state = 666;
            this.stringItem();
            this.state = 667;
            this.match(SQLParser.RPAR);
            this.state = 671;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_CHARACTER) {
                this.state = 668;
                this.match(SQLParser.K_CHARACTER);
                this.state = 669;
                this.match(SQLParser.K_SET);
                this.state = 670;
                this.charsetName();
            }

            this.state = 675;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_COLLATE) {
                this.state = 673;
                this.match(SQLParser.K_COLLATE);
                this.state = 674;
                this.collateName();
            }

            break;
        case SQLParser.K_SET:
            localctx = new TypeSetStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 33);
            this.state = 677;
            this.match(SQLParser.K_SET);
            this.state = 678;
            this.match(SQLParser.LPAR);
            this.state = 684;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,105,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 679;
                    this.stringItem();
                    this.state = 680;
                    this.match(SQLParser.COMMA); 
                }
                this.state = 686;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,105,this._ctx);
            }

            this.state = 687;
            this.stringItem();
            this.state = 688;
            this.match(SQLParser.RPAR);
            this.state = 692;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_CHARACTER) {
                this.state = 689;
                this.match(SQLParser.K_CHARACTER);
                this.state = 690;
                this.match(SQLParser.K_SET);
                this.state = 691;
                this.charsetName();
            }

            this.state = 696;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_COLLATE) {
                this.state = 694;
                this.match(SQLParser.K_COLLATE);
                this.state = 695;
                this.collateName();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StringItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_stringItem;
    return this;
}

StringItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringItemContext.prototype.constructor = StringItemContext;

StringItemContext.prototype.STRING = function() {
    return this.getToken(SQLParser.STRING, 0);
};

StringItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterStringItem(this);
	}
};

StringItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitStringItem(this);
	}
};




SQLParser.StringItemContext = StringItemContext;

SQLParser.prototype.stringItem = function() {

    var localctx = new StringItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, SQLParser.RULE_stringItem);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 700;
        this.match(SQLParser.STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CharsetNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_charsetName;
    return this;
}

CharsetNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CharsetNameContext.prototype.constructor = CharsetNameContext;

CharsetNameContext.prototype.idName = function() {
    return this.getTypedRuleContext(IdNameContext,0);
};

CharsetNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCharsetName(this);
	}
};

CharsetNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCharsetName(this);
	}
};




SQLParser.CharsetNameContext = CharsetNameContext;

SQLParser.prototype.charsetName = function() {

    var localctx = new CharsetNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, SQLParser.RULE_charsetName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 702;
        this.idName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CollateNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_collateName;
    return this;
}

CollateNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CollateNameContext.prototype.constructor = CollateNameContext;

CollateNameContext.prototype.idName = function() {
    return this.getTypedRuleContext(IdNameContext,0);
};

CollateNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterCollateName(this);
	}
};

CollateNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitCollateName(this);
	}
};




SQLParser.CollateNameContext = CollateNameContext;

SQLParser.prototype.collateName = function() {

    var localctx = new CollateNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, SQLParser.RULE_collateName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 704;
        this.idName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReferenceOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_referenceOption;
    return this;
}

ReferenceOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReferenceOptionContext.prototype.constructor = ReferenceOptionContext;

ReferenceOptionContext.prototype.K_RESTRICT = function() {
    return this.getToken(SQLParser.K_RESTRICT, 0);
};

ReferenceOptionContext.prototype.K_CASCADE = function() {
    return this.getToken(SQLParser.K_CASCADE, 0);
};

ReferenceOptionContext.prototype.K_SET = function() {
    return this.getToken(SQLParser.K_SET, 0);
};

ReferenceOptionContext.prototype.K_NULL = function() {
    return this.getToken(SQLParser.K_NULL, 0);
};

ReferenceOptionContext.prototype.K_NO = function() {
    return this.getToken(SQLParser.K_NO, 0);
};

ReferenceOptionContext.prototype.K_ACTION = function() {
    return this.getToken(SQLParser.K_ACTION, 0);
};

ReferenceOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterReferenceOption(this);
	}
};

ReferenceOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitReferenceOption(this);
	}
};




SQLParser.ReferenceOptionContext = ReferenceOptionContext;

SQLParser.prototype.referenceOption = function() {

    var localctx = new ReferenceOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, SQLParser.RULE_referenceOption);
    try {
        this.state = 712;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SQLParser.K_RESTRICT:
            this.enterOuterAlt(localctx, 1);
            this.state = 706;
            this.match(SQLParser.K_RESTRICT);
            break;
        case SQLParser.K_CASCADE:
            this.enterOuterAlt(localctx, 2);
            this.state = 707;
            this.match(SQLParser.K_CASCADE);
            break;
        case SQLParser.K_SET:
            this.enterOuterAlt(localctx, 3);
            this.state = 708;
            this.match(SQLParser.K_SET);
            this.state = 709;
            this.match(SQLParser.K_NULL);
            break;
        case SQLParser.K_NO:
            this.enterOuterAlt(localctx, 4);
            this.state = 710;
            this.match(SQLParser.K_NO);
            this.state = 711;
            this.match(SQLParser.K_ACTION);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefaultValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_defaultValue;
    return this;
}

DefaultValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefaultValueContext.prototype.constructor = DefaultValueContext;

DefaultValueContext.prototype.INT = function() {
    return this.getToken(SQLParser.INT, 0);
};

DefaultValueContext.prototype.STRING = function() {
    return this.getToken(SQLParser.STRING, 0);
};

DefaultValueContext.prototype.FLOAT = function() {
    return this.getToken(SQLParser.FLOAT, 0);
};

DefaultValueContext.prototype.BOOL = function() {
    return this.getToken(SQLParser.BOOL, 0);
};

DefaultValueContext.prototype.K_NULL = function() {
    return this.getToken(SQLParser.K_NULL, 0);
};

DefaultValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterDefaultValue(this);
	}
};

DefaultValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitDefaultValue(this);
	}
};




SQLParser.DefaultValueContext = DefaultValueContext;

SQLParser.prototype.defaultValue = function() {

    var localctx = new DefaultValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, SQLParser.RULE_defaultValue);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 714;
        _la = this._input.LA(1);
        if(!(_la===SQLParser.BOOL || _la===SQLParser.K_NULL || ((((_la - 84)) & ~0x1f) == 0 && ((1 << (_la - 84)) & ((1 << (SQLParser.INT - 84)) | (1 << (SQLParser.FLOAT - 84)) | (1 << (SQLParser.STRING - 84)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_tableOptions;
    return this;
}

TableOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableOptionsContext.prototype.constructor = TableOptionsContext;

TableOptionsContext.prototype.option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OptionContext);
    } else {
        return this.getTypedRuleContext(OptionContext,i);
    }
};

TableOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterTableOptions(this);
	}
};

TableOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitTableOptions(this);
	}
};




SQLParser.TableOptionsContext = TableOptionsContext;

SQLParser.prototype.tableOptions = function() {

    var localctx = new TableOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, SQLParser.RULE_tableOptions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 719;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLParser.K_DEFAULT) | (1 << SQLParser.K_CHARACTER) | (1 << SQLParser.K_COLLATE) | (1 << SQLParser.K_COMMENT))) !== 0) || _la===SQLParser.NAME) {
            this.state = 716;
            this.option();
            this.state = 721;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_option;
    return this;
}

OptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionContext.prototype.constructor = OptionContext;

OptionContext.prototype.NAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.NAME);
    } else {
        return this.getToken(SQLParser.NAME, i);
    }
};


OptionContext.prototype.EQ = function() {
    return this.getToken(SQLParser.EQ, 0);
};

OptionContext.prototype.createSpecification = function() {
    return this.getTypedRuleContext(CreateSpecificationContext,0);
};

OptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterOption(this);
	}
};

OptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitOption(this);
	}
};




SQLParser.OptionContext = OptionContext;

SQLParser.prototype.option = function() {

    var localctx = new OptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, SQLParser.RULE_option);
    try {
        this.state = 726;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SQLParser.NAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 722;
            this.match(SQLParser.NAME);
            this.state = 723;
            this.match(SQLParser.EQ);
            this.state = 724;
            this.match(SQLParser.NAME);
            break;
        case SQLParser.K_DEFAULT:
        case SQLParser.K_CHARACTER:
        case SQLParser.K_COLLATE:
        case SQLParser.K_COMMENT:
            this.enterOuterAlt(localctx, 2);
            this.state = 725;
            this.createSpecification();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_idName;
    return this;
}

IdNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdNameContext.prototype.constructor = IdNameContext;

IdNameContext.prototype.ID = function() {
    return this.getToken(SQLParser.ID, 0);
};

IdNameContext.prototype.SINGLE_QUOTE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.SINGLE_QUOTE);
    } else {
        return this.getToken(SQLParser.SINGLE_QUOTE, i);
    }
};


IdNameContext.prototype.NAME = function() {
    return this.getToken(SQLParser.NAME, 0);
};

IdNameContext.prototype.DOUBLE_QUOTE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.DOUBLE_QUOTE);
    } else {
        return this.getToken(SQLParser.DOUBLE_QUOTE, i);
    }
};


IdNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.enterIdName(this);
	}
};

IdNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLParserListener ) {
        listener.exitIdName(this);
	}
};




SQLParser.IdNameContext = IdNameContext;

SQLParser.prototype.idName = function() {

    var localctx = new IdNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, SQLParser.RULE_idName);
    try {
        this.state = 736;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SQLParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 728;
            this.match(SQLParser.ID);
            break;
        case SQLParser.SINGLE_QUOTE:
            this.enterOuterAlt(localctx, 2);
            this.state = 729;
            this.match(SQLParser.SINGLE_QUOTE);
            this.state = 730;
            this.match(SQLParser.NAME);
            this.state = 731;
            this.match(SQLParser.SINGLE_QUOTE);
            break;
        case SQLParser.DOUBLE_QUOTE:
            this.enterOuterAlt(localctx, 3);
            this.state = 732;
            this.match(SQLParser.DOUBLE_QUOTE);
            this.state = 733;
            this.match(SQLParser.NAME);
            this.state = 734;
            this.match(SQLParser.DOUBLE_QUOTE);
            break;
        case SQLParser.NAME:
            this.enterOuterAlt(localctx, 4);
            this.state = 735;
            this.match(SQLParser.NAME);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.SQLParser = SQLParser;
